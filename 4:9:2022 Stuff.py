Python 3.9.10 (main, Feb 19 2022, 01:53:40) 
[Clang 10.0.0 (clang-1000.10.44.4)] on darwin
Type "help", "copyright", "credits" or "license()" for more information.
>>> (int)'a'
SyntaxError: invalid syntax
>>> int('a')
Traceback (most recent call last):
  File "<pyshell#1>", line 1, in <module>
    int('a')
ValueError: invalid literal for int() with base 10: 'a'
>>> x = [[]*5]
>>> x
[[]]
>>> x = [[]*5 for _ in range(3)]
>>> x
[[], [], []]
>>> x = [[None for _ in range(5)] for _ in range(6)]
>>> x
[[None, None, None, None, None], [None, None, None, None, None], [None, None, None, None, None], [None, None, None, None, None], [None, None, None, None, None], [None, None, None, None, None]]
>>> x = [[] for _ in range(3)]
>>> x
[[], [], []]
>>> x = [[[1,2] for _ in range(2)] for _ in range(3)]
>>> x
[[[1, 2], [1, 2]], [[1, 2], [1, 2]], [[1, 2], [1, 2]]]
>>> x = [1,2]
>>> al = [[3],[3,4],[1,2]]
>>> for i in al:
	if i==x:
		print(i)

		
[1, 2]
>>> al = [[3],[3,4],[2,1]]
>>> for i in al:
	if i==x:
		print(i)

		
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> listCombinationsDP(4, [1,2,3,4,5,6], [[] for _ in range(k)])
Traceback (most recent call last):
  File "<pyshell#25>", line 1, in <module>
    listCombinationsDP(4, [1,2,3,4,5,6], [[] for _ in range(k)])
NameError: name 'k' is not defined
>>> listCombinationsDP(4, [1,2,3,4,5,6], [[] for _ in range(4)])
Traceback (most recent call last):
  File "<pyshell#26>", line 1, in <module>
    listCombinationsDP(4, [1,2,3,4,5,6], [[] for _ in range(4)])
  File "/Users/admin/Documents/Restricted nPk/Restricted Permutations.py", line 54, in listCombinationsDP
    for i in mem[k]:
IndexError: list index out of range
>>> listCombinationsDP(4, [1,2,3,4,5,6], [[] for _ in range(5)])
[[1, 2, 3, 4], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]]
>>> mem = [[] for _ in range(5)]
>>> listCombinationsDP(4, [1,2,3,4,5,6], mem)
[[1, 2, 3, 4], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]]
>>> mem
[[], [([6], [[1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]]), ([5, 6], [[1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]]), ([4, 5, 6], [[1, 2, 3, 4], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]])], [([6], []), ([5, 6], [[1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]]), ([4, 5, 6], [[1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]]), ([3, 4, 5, 6], [[1, 2, 3, 4], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]])], [([6], []), ([5, 6], []), ([4, 5, 6], [[1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]]), ([3, 4, 5, 6], [[1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]]), ([2, 3, 4, 5, 6], [[1, 2, 3, 4], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]])], [([6], []), ([5, 6], []), ([4, 5, 6], []), ([3, 4, 5, 6], [[1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]]), ([2, 3, 4, 5, 6], [[1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]]), ([1, 2, 3, 4, 5, 6], [[1, 2, 3, 4], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]])]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> listCombinationsDP(4, [1,2,3,4,5,6], [[] for _ in range(5)])
YAY
YAY
YAY
YAY
YAY
YAY
YAY
YAY
YAY
[[1, 2, 3, 4], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 2, 2, 3, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 4, 5, 6]]
>>> listCombinationsDP(2, [1,2,3], [[] for _ in range(5)])
YAY
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> mem = [[] for _ in range(5)]
>>> listCombinationsDP(2, [1,2,3], mem)
YAY
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> mem
[[], [([3], [[1, 2, 3]]), ([2, 3], [[1, 2], [1, 2, 3]])], [([3], []), ([2, 3], [[1, 2, 3]]), ([1, 2, 3], [[1, 2], [1, 2, 3], [1, 2, 3]])], [], []]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> listCombinationsDP(2, [1,2,3], [[] for _ in range(5)])
[[2, 3]]
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> tup = (1,[1,2])
>>> tup[0]
1
>>> tup[1]
[1, 2]
>>> for i in tup:
	print("yay")

	
yay
yay
>>> listCombinations(2,[1,2])
[[1, 2]]
>>> listCombinations(2,[1,2,3])
[[1, 2], [1, 3], [2, 3]]
>>> mem = [[] for _ in range(5)]
>>> listCombinationsDP(2, [1,2,3], mem)
[[2, 3]]
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> mem
[[], [([3], [[1, 2, 3]]), ([2, 3], [[1, 2], [1, 2, 3]])], [([3], []), ([2, 3], [[1, 2, 3]]), ([1, 2, 3], [[1, 2], [1, 2, 3], [1, 2, 3]])], [], []]
>>> mem = [[] for _ in range(5)]
>>> listCombinationsDP(1, [1,2], mem)
[[1], [2]]
>>> mem
[[], [([2], [[2]]), ([1, 2], [[1], [2]])], [], [], []]
>>> mem[1]
[([2], [[2]]), ([1, 2], [[1], [2]])]
>>> for i in mem[k]:
	print(i)

	
Traceback (most recent call last):
  File "<pyshell#54>", line 1, in <module>
    for i in mem[k]:
NameError: name 'k' is not defined
>>> for i in mem[1]:
	print(i)

	
([2], [[2]])
([1, 2], [[1], [2]])
>>> for i in mem[1]:
	if i[0]==[1,2]:
		print(i[1]);

		
[[1], [2]]
>>> mem = [[] for _ in range(5)]
>>> listCombinationsDP(1, [1,2,3], mem)
[[1], [2], [3]]
>>> mem
[[], [([3], [[3]]), ([2, 3], [[2], [3]]), ([1, 2, 3], [[1], [2], [3]])], [], [], []]
>>> listCombinationsDP(2, [1,2,3], mem)
[[3]]
[[2], [2, 3]]
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> mem
[[], [([3], [[1, 2, 3]]), ([2, 3], [[1, 2], [1, 2, 3]]), ([1, 2, 3], [[1], [1, 2], [1, 2, 3]])], [([3], []), ([2, 3], [[1, 2, 3]]), ([1, 2, 3], [[1, 2], [1, 2, 3], [1, 2, 3]])], [], []]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> listCombinationsDP(2, [1,2,3], [[] for _ in range(5)])
[] []
[[]] []
[[3]] []
[[]] [[2, 3]]
[[2], [2, 3]] [[2, 3]]
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> listCombinationsDP(2, [1,2,3], [[] for _ in range(5)])
2 [3] [] []
1 [3] [[]] []
2 [2, 3] [[3]] []
1 [2, 3] [[]] [[2, 3]]
2 [1, 2, 3] [[2], [2, 3]] [[2, 3]]
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> listCombinationsDP(2, [1,2,3], [[] for _ in range(5)])
2 [3] [] []
1 [3] [[3]] []
2 [2, 3] [[2, 3]] []
1 [2, 3] [[2]] [[2, 3]]
2 [1, 2, 3] [[1, 2], [1, 2, 3]] [[1, 2, 3]]
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> listCombinationsDP(1,[2,3],[[] for i in range(10)])
1 [3] [[3]] []
1 [2, 3] [[2]] [[3]]
[[2], [3]]
>>> listCombinationsDP(1,[],[[]for i in range(10)])
[]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> listCombinationsDP(2, [1,2,3], [[] for _ in range(5)])
2 [3] [] []
2 [3] [] []
1 [3] [[]] []
1 [3] [[3]] []
2 [2, 3] [[3]] []
2 [2, 3] [[2, 3]] []
1 [2, 3] [[]] [[2, 3]]
1 [2, 3] [[2]] [[2, 3]]
2 [1, 2, 3] [[2], [2, 3]] [[2, 3]]
2 [1, 2, 3] [[1, 2], [1, 2, 3]] [[1, 2, 3]]
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> listCombinationsDP(2, [1,2,3], [[] for _ in range(5)])
2 [3] [] []
2 [3] [] []
1 [3] [[]] []
1 [3] [[3]] []
2 [2, 3] [[3]] []
2 [2, 3] [[2, 3]] []
1 [2, 3] [[]] [[2, 3]]
1 [2, 3] [[2]] [[2, 3]]
2 [1, 2, 3] [[2], [2, 3]] [[2, 3]]
2 [1, 2, 3] [[1, 2], [1, 2, 3]] [[1, 2, 3]]
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> listCombinationsDP(2, [1,2,3], [[] for _ in range(5)])
2 [3] [] []
2 [3] [] []
1 [3] [[]] []
1 [3] [[3]] []
2 [2, 3] [[3]] []
2 [2, 3] [[2, 3]] []
1 [2, 3] [[]] [[2, 3]]
1 [2, 3] [[2]] [[2, 3]]
2 [1, 2, 3] [[2], [2, 3]] [[2, 3]]
2 [1, 2, 3] [[1, 2], [1, 2, 3]] [[1, 2, 3]]
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> listCombinationsDP(1,[2,3],[[] for i in range(10)])
[[2], [3]]
>>> listCombinationsDP(2, [1,2,3], [[] for _ in range(5)])
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> listCombinationsDP(1, [2,3], [[] for _ in range(5)])
[[2], [3]]
>>> listCombinationsDP(2, [2,3], [[] for _ in range(5)])
[[2, 3]]
>>> mem =  [[] for _ in range(5)]
>>> listCombinationsDP(1, [2,3], mem)
[[2], [3]]
>>> listCombinationsDP(2, [2,3], mem)
[[2, 3]]
>>> mem
[[], [([3], [[2, 3]]), ([2, 3], [[2], [2, 3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> listCombinationsDP(2, [1,2,3], [[] for _ in range(5)])
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> listCombinationsDP(2, [1,2,3], [[] for _ in range(5)])
[[1, 2], [1, 2, 3], [1, 2, 3]]
>>> mem =  [[] for _ in range(5)]
>>> 
>>> listCombinationsDP(2, [2,3], mem)
[[2, 3]]
>>> listCombinationsDP(1, [2,3], mem)
[[2], [2, 3]]
>>> mem =  [[] for _ in range(5)]
>>> listCombinationsDP(2, [2,3], mem)
[[2, 3]]
>>> mem
[[], [([3], [[2, 3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> mem =  [[] for _ in range(5)]
>>> listCombinationsDP(2, [3], mem)
[]
>>> mem
[[], [], [([3], [])], [], []]
>>> listCombinationsDP(1, [3], mem)
[[3]]
>>> mem
[[], [([3], [[3]])], [([3], [])], [], []]
>>> listCombinationsDP(2, [2,3], mem)
[[2, 3]]
>>> mem
[[], [([3], [[2, 3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> mem=[[], [([3], [[3]])], [([3], [])], [], []]
>>> listCombinationsDP(2, [2,3], mem)
[[2, 3]]
>>> mem
[[], [([3], [[2, 3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> listCombinationsDP(1, [3], mem)
[[2, 3]]
>>> mem
[[], [([3], [[2, 3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> list2 = listCombinationsDP(2, [2,3], mem)
>>> list1 = listCombinationsDP(1, [3], mem)
>>> mem
[[], [([3], [[2, 3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> for i in list1:
	i.insert(0, list[0]);

	
>>> mem
[[], [([3], [[list[0], 2, 3]])], [([3], []), ([2, 3], [[list[0], 2, 3]])], [], []]
>>> mem = [[], [([3], [[2, 3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> list = [2,3]
>>> for i in list1:
	i.insert(0, list[0]);

	
>>> mem
[[], [([3], [[2, 3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> ansList = join(list1, list2)
>>> mem
[[], [([3], [[2, 3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> mem[2].appendmem =  [[] for _ in range(5)]
Traceback (most recent call last):
  File "<pyshell#117>", line 1, in <module>
    mem[2].appendmem =  [[] for _ in range(5)]
AttributeError: 'list' object has no attribute 'appendmem'
>>> mem =  [[] for _ in range(5)]
>>> listCombinationsDP(2, [2,3], mem)
[[2, 3]]
>>> listCombinationsDP(1, [2,3], mem)
[[2], [2, 3]]
>>> mem
[[], [([3], [[2, 3]]), ([2, 3], [[2], [2, 3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> mem =  [[] for _ in range(5)]
>>> listCombinationsDP(2, [2,3], mem)
[[2, 3]]
>>> mem
[[], [([3], [[2, 3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> mem =  [[] for _ in range(5)]
>>> listCombinationsDP(2, [3], mem)
[]
>>> mem
[[], [], [([3], [])], [], []]
>>> listCombinationsDP(1, [3], mem)
[[3]]
>>> list2 = listCombinationsDP(2, [3], mem)
>>> list1 = listCombinationsDP(1, [3], mem)
>>> mem
[[], [([3], [[3]])], [([3], [])], [], []]
>>> list = [2,3]
>>> for i in list1:
	i.insert(0,list[0])

	
>>> mem
[[], [([3], [[2, 3]])], [([3], [])], [], []]
>>> one = [1,2,3]
>>> two = [2,3,4]
>>> ans = join(one, two)
>>> ans
[1, 2, 3, 2, 3, 4]
>>> one[0] = 100
>>> ans
[1, 2, 3, 2, 3, 4]
>>> one = [[1],[2],[3]]
>>> two = [[2],[3],[4]]
>>> ans = join(one, two)
>>> one[0] = [100]
>>> ans
[[1], [2], [3], [2], [3], [4]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> mem =  [[] for _ in range(5)]
>>> listCombinationsDP(2, [2,3], mem)
[[2, 3]]
>>> mem
[[], [([3], [[2, 3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> test = [1,2]
>>> t = test.copy()
>>> t
[1, 2]
>>> test[0] =10
>>> t
[1, 2]
>>> test = [[10,11],[2]]
>>> t = test.copy()
>>> t
[[10, 11], [2]]
>>> test[0][1] = 12
>>> t
[[10, 12], [2]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> mem =  [[] for _ in range(5)]
>>> listCombinationsDP(2, [2,3], mem)
[[2, 3]]
>>> mem
[[], [([3], [[2, 3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> mem =  [[] for _ in range(5)]
>>> listCombinationsDP(2, [2,3], mem)
[[2, 3]]
>>> mem
[[], [([3], [[3]])], [([3], []), ([2, 3], [[2, 3]])], [], []]
>>> a = [[10, 11], [2]]
>>> b = [[1,4,2],[2,3,4]]
>>> t = join(a,b)
>>> x = join(a,b)
>>> a[0][0] = 15
>>> t
[[15, 11], [2], [1, 4, 2], [2, 3, 4]]
>>> x
[[15, 11], [2], [1, 4, 2], [2, 3, 4]]
>>> a = [[10, 11], [2]]
>>> b = [[1,4,2],[2,3,4]]
>>> t = join(a,b)
>>> x = join(a,b)
>>> x[0][0] = 25
>>> t
[[25, 11], [2], [1, 4, 2], [2, 3, 4]]
>>> def join(list1, list2):
    ansList = [];
    for i in list1:
        ansList.append(i);
    for i in list2:
        ansList.append(i);
    return ansList;

>>> a = [[10, 11], [2]]
>>> b = [[1],[2,3]]
>>> c = join(a,b)
>>> d = join(a,b)
>>> d
[[10, 11], [2], [1], [2, 3]]
>>> c[0][0] = 0
>>> d
[[0, 11], [2], [1], [2, 3]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> listCombinationsDP(4,[1,2,3,4,5,6],[[]for i in range(10)])
[[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 5, 6], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 5, 6], [1, 4, 5, 6], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 4, 5, 6], [3, 4, 5, 6]]
>>> mem = [[] for _ in range(10)]
>>> listCombinationsDP(4,[1,2,3,4,5,6],mem)
[[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 5, 6], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 5, 6], [1, 4, 5, 6], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 4, 5, 6], [3, 4, 5, 6]]
>>> mem
[[], [([6], [[2, 3, 4, 6]]), ([5, 6], [[1, 2, 3, 5], [1, 2, 3, 6]]), ([4, 5, 6], [[4], [5], [6]])], [([6], []), ([5, 6], [[2, 3, 5, 6]]), ([4, 5, 6], [[1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 5, 6]]), ([3, 4, 5, 6], [[3, 4], [3, 5], [3, 6], [4, 5], [4, 6], [5, 6]])], [([6], []), ([5, 6], []), ([4, 5, 6], [[2, 4, 5, 6]]), ([3, 4, 5, 6], [[1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 5, 6], [1, 4, 5, 6]]), ([2, 3, 4, 5, 6], [[2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6], [2, 5, 6], [3, 4, 5], [3, 4, 6], [3, 5, 6], [4, 5, 6]])], [([6], []), ([5, 6], []), ([4, 5, 6], []), ([3, 4, 5, 6], [[3, 4, 5, 6]]), ([2, 3, 4, 5, 6], [[2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 4, 5, 6], [3, 4, 5, 6]]), ([1, 2, 3, 4, 5, 6], [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 5, 6], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 5, 6], [1, 4, 5, 6], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 4, 5, 6], [3, 4, 5, 6]])], [], [], [], [], []]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> mem = [[] for _ in range(10)]
>>> listCombinationsDP(4,[1,2,3,4,5,6],mem)
[[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 5, 6], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 5, 6], [1, 4, 5, 6], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 4, 5, 6], [3, 4, 5, 6]]
>>> mem
[[], [([6], [[6]]), ([5, 6], [[5], [6]]), ([4, 5, 6], [[4], [5], [6]])], [([6], []), ([5, 6], [[5, 6]]), ([4, 5, 6], [[4, 5], [4, 6], [5, 6]]), ([3, 4, 5, 6], [[3, 4], [3, 5], [3, 6], [4, 5], [4, 6], [5, 6]])], [([6], []), ([5, 6], []), ([4, 5, 6], [[4, 5, 6]]), ([3, 4, 5, 6], [[3, 4, 5], [3, 4, 6], [3, 5, 6], [4, 5, 6]]), ([2, 3, 4, 5, 6], [[2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6], [2, 5, 6], [3, 4, 5], [3, 4, 6], [3, 5, 6], [4, 5, 6]])], [([6], []), ([5, 6], []), ([4, 5, 6], []), ([3, 4, 5, 6], [[3, 4, 5, 6]]), ([2, 3, 4, 5, 6], [[2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 4, 5, 6], [3, 4, 5, 6]]), ([1, 2, 3, 4, 5, 6], [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 5, 6], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 5, 6], [1, 4, 5, 6], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 4, 5, 6], [3, 4, 5, 6]])], [], [], [], [], []]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> mem = [[] for _ in range(10)]
>>> listCombinationsDP(4,[1,2,3,4,5,6],mem)
yay
yay
yay
yay
yay
yay
yay
yay
yay
[[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 5, 6], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 5, 6], [1, 4, 5, 6], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 4, 5, 6], [3, 4, 5, 6]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> mem = [[] for _ in range(10)]
>>> listKPermutationsDP(4,[1,2,3,4,5,6],mem)
[[3, 4, 5, 6], [4, 3, 5, 6], [4, 5, 3, 6], [4, 5, 6, 3], [3, 5, 4, 6], [5, 3, 4, 6], [5, 4, 3, 6], [5, 4, 6, 3], [3, 5, 6, 4], [5, 3, 6, 4], [5, 6, 3, 4], [5, 6, 4, 3], [3, 4, 6, 5], [4, 3, 6, 5], [4, 6, 3, 5], [4, 6, 5, 3], [3, 6, 4, 5], [6, 3, 4, 5], [6, 4, 3, 5], [6, 4, 5, 3], [3, 6, 5, 4], [6, 3, 5, 4], [6, 5, 3, 4], [6, 5, 4, 3], [2, 4, 5, 6], [4, 2, 5, 6], [4, 5, 2, 6], [4, 5, 6, 2], [2, 5, 4, 6], [5, 2, 4, 6], [5, 4, 2, 6], [5, 4, 6, 2], [2, 5, 6, 4], [5, 2, 6, 4], [5, 6, 2, 4], [5, 6, 4, 2], [2, 4, 6, 5], [4, 2, 6, 5], [4, 6, 2, 5], [4, 6, 5, 2], [2, 6, 4, 5], [6, 2, 4, 5], [6, 4, 2, 5], [6, 4, 5, 2], [2, 6, 5, 4], [6, 2, 5, 4], [6, 5, 2, 4], [6, 5, 4, 2], [2, 3, 5, 6], [3, 2, 5, 6], [3, 5, 2, 6], [3, 5, 6, 2], [2, 5, 3, 6], [5, 2, 3, 6], [5, 3, 2, 6], [5, 3, 6, 2], [2, 5, 6, 3], [5, 2, 6, 3], [5, 6, 2, 3], [5, 6, 3, 2], [2, 3, 6, 5], [3, 2, 6, 5], [3, 6, 2, 5], [3, 6, 5, 2], [2, 6, 3, 5], [6, 2, 3, 5], [6, 3, 2, 5], [6, 3, 5, 2], [2, 6, 5, 3], [6, 2, 5, 3], [6, 5, 2, 3], [6, 5, 3, 2], [2, 3, 4, 6], [3, 2, 4, 6], [3, 4, 2, 6], [3, 4, 6, 2], [2, 4, 3, 6], [4, 2, 3, 6], [4, 3, 2, 6], [4, 3, 6, 2], [2, 4, 6, 3], [4, 2, 6, 3], [4, 6, 2, 3], [4, 6, 3, 2], [2, 3, 6, 4], [3, 2, 6, 4], [3, 6, 2, 4], [3, 6, 4, 2], [2, 6, 3, 4], [6, 2, 3, 4], [6, 3, 2, 4], [6, 3, 4, 2], [2, 6, 4, 3], [6, 2, 4, 3], [6, 4, 2, 3], [6, 4, 3, 2], [2, 3, 4, 5], [3, 2, 4, 5], [3, 4, 2, 5], [3, 4, 5, 2], [2, 4, 3, 5], [4, 2, 3, 5], [4, 3, 2, 5], [4, 3, 5, 2], [2, 4, 5, 3], [4, 2, 5, 3], [4, 5, 2, 3], [4, 5, 3, 2], [2, 3, 5, 4], [3, 2, 5, 4], [3, 5, 2, 4], [3, 5, 4, 2], [2, 5, 3, 4], [5, 2, 3, 4], [5, 3, 2, 4], [5, 3, 4, 2], [2, 5, 4, 3], [5, 2, 4, 3], [5, 4, 2, 3], [5, 4, 3, 2], [1, 4, 5, 6], [4, 1, 5, 6], [4, 5, 1, 6], [4, 5, 6, 1], [1, 5, 4, 6], [5, 1, 4, 6], [5, 4, 1, 6], [5, 4, 6, 1], [1, 5, 6, 4], [5, 1, 6, 4], [5, 6, 1, 4], [5, 6, 4, 1], [1, 4, 6, 5], [4, 1, 6, 5], [4, 6, 1, 5], [4, 6, 5, 1], [1, 6, 4, 5], [6, 1, 4, 5], [6, 4, 1, 5], [6, 4, 5, 1], [1, 6, 5, 4], [6, 1, 5, 4], [6, 5, 1, 4], [6, 5, 4, 1], [1, 3, 5, 6], [3, 1, 5, 6], [3, 5, 1, 6], [3, 5, 6, 1], [1, 5, 3, 6], [5, 1, 3, 6], [5, 3, 1, 6], [5, 3, 6, 1], [1, 5, 6, 3], [5, 1, 6, 3], [5, 6, 1, 3], [5, 6, 3, 1], [1, 3, 6, 5], [3, 1, 6, 5], [3, 6, 1, 5], [3, 6, 5, 1], [1, 6, 3, 5], [6, 1, 3, 5], [6, 3, 1, 5], [6, 3, 5, 1], [1, 6, 5, 3], [6, 1, 5, 3], [6, 5, 1, 3], [6, 5, 3, 1], [1, 3, 4, 6], [3, 1, 4, 6], [3, 4, 1, 6], [3, 4, 6, 1], [1, 4, 3, 6], [4, 1, 3, 6], [4, 3, 1, 6], [4, 3, 6, 1], [1, 4, 6, 3], [4, 1, 6, 3], [4, 6, 1, 3], [4, 6, 3, 1], [1, 3, 6, 4], [3, 1, 6, 4], [3, 6, 1, 4], [3, 6, 4, 1], [1, 6, 3, 4], [6, 1, 3, 4], [6, 3, 1, 4], [6, 3, 4, 1], [1, 6, 4, 3], [6, 1, 4, 3], [6, 4, 1, 3], [6, 4, 3, 1], [1, 3, 4, 5], [3, 1, 4, 5], [3, 4, 1, 5], [3, 4, 5, 1], [1, 4, 3, 5], [4, 1, 3, 5], [4, 3, 1, 5], [4, 3, 5, 1], [1, 4, 5, 3], [4, 1, 5, 3], [4, 5, 1, 3], [4, 5, 3, 1], [1, 3, 5, 4], [3, 1, 5, 4], [3, 5, 1, 4], [3, 5, 4, 1], [1, 5, 3, 4], [5, 1, 3, 4], [5, 3, 1, 4], [5, 3, 4, 1], [1, 5, 4, 3], [5, 1, 4, 3], [5, 4, 1, 3], [5, 4, 3, 1], [1, 2, 5, 6], [2, 1, 5, 6], [2, 5, 1, 6], [2, 5, 6, 1], [1, 5, 2, 6], [5, 1, 2, 6], [5, 2, 1, 6], [5, 2, 6, 1], [1, 5, 6, 2], [5, 1, 6, 2], [5, 6, 1, 2], [5, 6, 2, 1], [1, 2, 6, 5], [2, 1, 6, 5], [2, 6, 1, 5], [2, 6, 5, 1], [1, 6, 2, 5], [6, 1, 2, 5], [6, 2, 1, 5], [6, 2, 5, 1], [1, 6, 5, 2], [6, 1, 5, 2], [6, 5, 1, 2], [6, 5, 2, 1], [1, 2, 4, 6], [2, 1, 4, 6], [2, 4, 1, 6], [2, 4, 6, 1], [1, 4, 2, 6], [4, 1, 2, 6], [4, 2, 1, 6], [4, 2, 6, 1], [1, 4, 6, 2], [4, 1, 6, 2], [4, 6, 1, 2], [4, 6, 2, 1], [1, 2, 6, 4], [2, 1, 6, 4], [2, 6, 1, 4], [2, 6, 4, 1], [1, 6, 2, 4], [6, 1, 2, 4], [6, 2, 1, 4], [6, 2, 4, 1], [1, 6, 4, 2], [6, 1, 4, 2], [6, 4, 1, 2], [6, 4, 2, 1], [1, 2, 4, 5], [2, 1, 4, 5], [2, 4, 1, 5], [2, 4, 5, 1], [1, 4, 2, 5], [4, 1, 2, 5], [4, 2, 1, 5], [4, 2, 5, 1], [1, 4, 5, 2], [4, 1, 5, 2], [4, 5, 1, 2], [4, 5, 2, 1], [1, 2, 5, 4], [2, 1, 5, 4], [2, 5, 1, 4], [2, 5, 4, 1], [1, 5, 2, 4], [5, 1, 2, 4], [5, 2, 1, 4], [5, 2, 4, 1], [1, 5, 4, 2], [5, 1, 4, 2], [5, 4, 1, 2], [5, 4, 2, 1], [1, 2, 3, 6], [2, 1, 3, 6], [2, 3, 1, 6], [2, 3, 6, 1], [1, 3, 2, 6], [3, 1, 2, 6], [3, 2, 1, 6], [3, 2, 6, 1], [1, 3, 6, 2], [3, 1, 6, 2], [3, 6, 1, 2], [3, 6, 2, 1], [1, 2, 6, 3], [2, 1, 6, 3], [2, 6, 1, 3], [2, 6, 3, 1], [1, 6, 2, 3], [6, 1, 2, 3], [6, 2, 1, 3], [6, 2, 3, 1], [1, 6, 3, 2], [6, 1, 3, 2], [6, 3, 1, 2], [6, 3, 2, 1], [1, 2, 3, 5], [2, 1, 3, 5], [2, 3, 1, 5], [2, 3, 5, 1], [1, 3, 2, 5], [3, 1, 2, 5], [3, 2, 1, 5], [3, 2, 5, 1], [1, 3, 5, 2], [3, 1, 5, 2], [3, 5, 1, 2], [3, 5, 2, 1], [1, 2, 5, 3], [2, 1, 5, 3], [2, 5, 1, 3], [2, 5, 3, 1], [1, 5, 2, 3], [5, 1, 2, 3], [5, 2, 1, 3], [5, 2, 3, 1], [1, 5, 3, 2], [5, 1, 3, 2], [5, 3, 1, 2], [5, 3, 2, 1], [1, 2, 3, 4], [2, 1, 3, 4], [2, 3, 1, 4], [2, 3, 4, 1], [1, 3, 2, 4], [3, 1, 2, 4], [3, 2, 1, 4], [3, 2, 4, 1], [1, 3, 4, 2], [3, 1, 4, 2], [3, 4, 1, 2], [3, 4, 2, 1], [1, 2, 4, 3], [2, 1, 4, 3], [2, 4, 1, 3], [2, 4, 3, 1], [1, 4, 2, 3], [4, 1, 2, 3], [4, 2, 1, 3], [4, 2, 3, 1], [1, 4, 3, 2], [4, 1, 3, 2], [4, 3, 1, 2], [4, 3, 2, 1]]
>>> len(listKPermutationsDP(4,[1,2,3,4,5,6],mem))
360
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> mem = [[] for _ in range(10)]
>>> listKPermutationsDP(4,[1,2,3,4,5,6],mem)
[[3, 4, 5, 6], [4, 3, 5, 6], [4, 5, 3, 6], [4, 5, 6, 3], [3, 5, 4, 6], [5, 3, 4, 6], [5, 4, 3, 6], [5, 4, 6, 3], [3, 5, 6, 4], [5, 3, 6, 4], [5, 6, 3, 4], [5, 6, 4, 3], [3, 4, 6, 5], [4, 3, 6, 5], [4, 6, 3, 5], [4, 6, 5, 3], [3, 6, 4, 5], [6, 3, 4, 5], [6, 4, 3, 5], [6, 4, 5, 3], [3, 6, 5, 4], [6, 3, 5, 4], [6, 5, 3, 4], [6, 5, 4, 3], [2, 4, 5, 6], [4, 2, 5, 6], [4, 5, 2, 6], [4, 5, 6, 2], [2, 5, 4, 6], [5, 2, 4, 6], [5, 4, 2, 6], [5, 4, 6, 2], [2, 5, 6, 4], [5, 2, 6, 4], [5, 6, 2, 4], [5, 6, 4, 2], [2, 4, 6, 5], [4, 2, 6, 5], [4, 6, 2, 5], [4, 6, 5, 2], [2, 6, 4, 5], [6, 2, 4, 5], [6, 4, 2, 5], [6, 4, 5, 2], [2, 6, 5, 4], [6, 2, 5, 4], [6, 5, 2, 4], [6, 5, 4, 2], [2, 3, 5, 6], [3, 2, 5, 6], [3, 5, 2, 6], [3, 5, 6, 2], [2, 5, 3, 6], [5, 2, 3, 6], [5, 3, 2, 6], [5, 3, 6, 2], [2, 5, 6, 3], [5, 2, 6, 3], [5, 6, 2, 3], [5, 6, 3, 2], [2, 3, 6, 5], [3, 2, 6, 5], [3, 6, 2, 5], [3, 6, 5, 2], [2, 6, 3, 5], [6, 2, 3, 5], [6, 3, 2, 5], [6, 3, 5, 2], [2, 6, 5, 3], [6, 2, 5, 3], [6, 5, 2, 3], [6, 5, 3, 2], [2, 3, 4, 6], [3, 2, 4, 6], [3, 4, 2, 6], [3, 4, 6, 2], [2, 4, 3, 6], [4, 2, 3, 6], [4, 3, 2, 6], [4, 3, 6, 2], [2, 4, 6, 3], [4, 2, 6, 3], [4, 6, 2, 3], [4, 6, 3, 2], [2, 3, 6, 4], [3, 2, 6, 4], [3, 6, 2, 4], [3, 6, 4, 2], [2, 6, 3, 4], [6, 2, 3, 4], [6, 3, 2, 4], [6, 3, 4, 2], [2, 6, 4, 3], [6, 2, 4, 3], [6, 4, 2, 3], [6, 4, 3, 2], [2, 3, 4, 5], [3, 2, 4, 5], [3, 4, 2, 5], [3, 4, 5, 2], [2, 4, 3, 5], [4, 2, 3, 5], [4, 3, 2, 5], [4, 3, 5, 2], [2, 4, 5, 3], [4, 2, 5, 3], [4, 5, 2, 3], [4, 5, 3, 2], [2, 3, 5, 4], [3, 2, 5, 4], [3, 5, 2, 4], [3, 5, 4, 2], [2, 5, 3, 4], [5, 2, 3, 4], [5, 3, 2, 4], [5, 3, 4, 2], [2, 5, 4, 3], [5, 2, 4, 3], [5, 4, 2, 3], [5, 4, 3, 2], [1, 4, 5, 6], [4, 1, 5, 6], [4, 5, 1, 6], [4, 5, 6, 1], [1, 5, 4, 6], [5, 1, 4, 6], [5, 4, 1, 6], [5, 4, 6, 1], [1, 5, 6, 4], [5, 1, 6, 4], [5, 6, 1, 4], [5, 6, 4, 1], [1, 4, 6, 5], [4, 1, 6, 5], [4, 6, 1, 5], [4, 6, 5, 1], [1, 6, 4, 5], [6, 1, 4, 5], [6, 4, 1, 5], [6, 4, 5, 1], [1, 6, 5, 4], [6, 1, 5, 4], [6, 5, 1, 4], [6, 5, 4, 1], [1, 3, 5, 6], [3, 1, 5, 6], [3, 5, 1, 6], [3, 5, 6, 1], [1, 5, 3, 6], [5, 1, 3, 6], [5, 3, 1, 6], [5, 3, 6, 1], [1, 5, 6, 3], [5, 1, 6, 3], [5, 6, 1, 3], [5, 6, 3, 1], [1, 3, 6, 5], [3, 1, 6, 5], [3, 6, 1, 5], [3, 6, 5, 1], [1, 6, 3, 5], [6, 1, 3, 5], [6, 3, 1, 5], [6, 3, 5, 1], [1, 6, 5, 3], [6, 1, 5, 3], [6, 5, 1, 3], [6, 5, 3, 1], [1, 3, 4, 6], [3, 1, 4, 6], [3, 4, 1, 6], [3, 4, 6, 1], [1, 4, 3, 6], [4, 1, 3, 6], [4, 3, 1, 6], [4, 3, 6, 1], [1, 4, 6, 3], [4, 1, 6, 3], [4, 6, 1, 3], [4, 6, 3, 1], [1, 3, 6, 4], [3, 1, 6, 4], [3, 6, 1, 4], [3, 6, 4, 1], [1, 6, 3, 4], [6, 1, 3, 4], [6, 3, 1, 4], [6, 3, 4, 1], [1, 6, 4, 3], [6, 1, 4, 3], [6, 4, 1, 3], [6, 4, 3, 1], [1, 3, 4, 5], [3, 1, 4, 5], [3, 4, 1, 5], [3, 4, 5, 1], [1, 4, 3, 5], [4, 1, 3, 5], [4, 3, 1, 5], [4, 3, 5, 1], [1, 4, 5, 3], [4, 1, 5, 3], [4, 5, 1, 3], [4, 5, 3, 1], [1, 3, 5, 4], [3, 1, 5, 4], [3, 5, 1, 4], [3, 5, 4, 1], [1, 5, 3, 4], [5, 1, 3, 4], [5, 3, 1, 4], [5, 3, 4, 1], [1, 5, 4, 3], [5, 1, 4, 3], [5, 4, 1, 3], [5, 4, 3, 1], [1, 2, 5, 6], [2, 1, 5, 6], [2, 5, 1, 6], [2, 5, 6, 1], [1, 5, 2, 6], [5, 1, 2, 6], [5, 2, 1, 6], [5, 2, 6, 1], [1, 5, 6, 2], [5, 1, 6, 2], [5, 6, 1, 2], [5, 6, 2, 1], [1, 2, 6, 5], [2, 1, 6, 5], [2, 6, 1, 5], [2, 6, 5, 1], [1, 6, 2, 5], [6, 1, 2, 5], [6, 2, 1, 5], [6, 2, 5, 1], [1, 6, 5, 2], [6, 1, 5, 2], [6, 5, 1, 2], [6, 5, 2, 1], [1, 2, 4, 6], [2, 1, 4, 6], [2, 4, 1, 6], [2, 4, 6, 1], [1, 4, 2, 6], [4, 1, 2, 6], [4, 2, 1, 6], [4, 2, 6, 1], [1, 4, 6, 2], [4, 1, 6, 2], [4, 6, 1, 2], [4, 6, 2, 1], [1, 2, 6, 4], [2, 1, 6, 4], [2, 6, 1, 4], [2, 6, 4, 1], [1, 6, 2, 4], [6, 1, 2, 4], [6, 2, 1, 4], [6, 2, 4, 1], [1, 6, 4, 2], [6, 1, 4, 2], [6, 4, 1, 2], [6, 4, 2, 1], [1, 2, 4, 5], [2, 1, 4, 5], [2, 4, 1, 5], [2, 4, 5, 1], [1, 4, 2, 5], [4, 1, 2, 5], [4, 2, 1, 5], [4, 2, 5, 1], [1, 4, 5, 2], [4, 1, 5, 2], [4, 5, 1, 2], [4, 5, 2, 1], [1, 2, 5, 4], [2, 1, 5, 4], [2, 5, 1, 4], [2, 5, 4, 1], [1, 5, 2, 4], [5, 1, 2, 4], [5, 2, 1, 4], [5, 2, 4, 1], [1, 5, 4, 2], [5, 1, 4, 2], [5, 4, 1, 2], [5, 4, 2, 1], [1, 2, 3, 6], [2, 1, 3, 6], [2, 3, 1, 6], [2, 3, 6, 1], [1, 3, 2, 6], [3, 1, 2, 6], [3, 2, 1, 6], [3, 2, 6, 1], [1, 3, 6, 2], [3, 1, 6, 2], [3, 6, 1, 2], [3, 6, 2, 1], [1, 2, 6, 3], [2, 1, 6, 3], [2, 6, 1, 3], [2, 6, 3, 1], [1, 6, 2, 3], [6, 1, 2, 3], [6, 2, 1, 3], [6, 2, 3, 1], [1, 6, 3, 2], [6, 1, 3, 2], [6, 3, 1, 2], [6, 3, 2, 1], [1, 2, 3, 5], [2, 1, 3, 5], [2, 3, 1, 5], [2, 3, 5, 1], [1, 3, 2, 5], [3, 1, 2, 5], [3, 2, 1, 5], [3, 2, 5, 1], [1, 3, 5, 2], [3, 1, 5, 2], [3, 5, 1, 2], [3, 5, 2, 1], [1, 2, 5, 3], [2, 1, 5, 3], [2, 5, 1, 3], [2, 5, 3, 1], [1, 5, 2, 3], [5, 1, 2, 3], [5, 2, 1, 3], [5, 2, 3, 1], [1, 5, 3, 2], [5, 1, 3, 2], [5, 3, 1, 2], [5, 3, 2, 1], [1, 2, 3, 4], [2, 1, 3, 4], [2, 3, 1, 4], [2, 3, 4, 1], [1, 3, 2, 4], [3, 1, 2, 4], [3, 2, 1, 4], [3, 2, 4, 1], [1, 3, 4, 2], [3, 1, 4, 2], [3, 4, 1, 2], [3, 4, 2, 1], [1, 2, 4, 3], [2, 1, 4, 3], [2, 4, 1, 3], [2, 4, 3, 1], [1, 4, 2, 3], [4, 1, 2, 3], [4, 2, 1, 3], [4, 2, 3, 1], [1, 4, 3, 2], [4, 1, 3, 2], [4, 3, 1, 2], [4, 3, 2, 1]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> mem = [[] for _ in range(10)]
>>> listKPermutationsDP(4,[1,2,3,4,5,6],mem)
[[3, 4, 5, 6], [4, 3, 5, 6], [4, 5, 3, 6], [4, 5, 6, 3], [3, 5, 4, 6], [5, 3, 4, 6], [5, 4, 3, 6], [5, 4, 6, 3], [3, 5, 6, 4], [5, 3, 6, 4], [5, 6, 3, 4], [5, 6, 4, 3], [3, 4, 6, 5], [4, 3, 6, 5], [4, 6, 3, 5], [4, 6, 5, 3], [3, 6, 4, 5], [6, 3, 4, 5], [6, 4, 3, 5], [6, 4, 5, 3], [3, 6, 5, 4], [6, 3, 5, 4], [6, 5, 3, 4], [6, 5, 4, 3], [2, 4, 5, 6], [4, 2, 5, 6], [4, 5, 2, 6], [4, 5, 6, 2], [2, 5, 4, 6], [5, 2, 4, 6], [5, 4, 2, 6], [5, 4, 6, 2], [2, 5, 6, 4], [5, 2, 6, 4], [5, 6, 2, 4], [5, 6, 4, 2], [2, 4, 6, 5], [4, 2, 6, 5], [4, 6, 2, 5], [4, 6, 5, 2], [2, 6, 4, 5], [6, 2, 4, 5], [6, 4, 2, 5], [6, 4, 5, 2], [2, 6, 5, 4], [6, 2, 5, 4], [6, 5, 2, 4], [6, 5, 4, 2], [2, 3, 5, 6], [3, 2, 5, 6], [3, 5, 2, 6], [3, 5, 6, 2], [2, 5, 3, 6], [5, 2, 3, 6], [5, 3, 2, 6], [5, 3, 6, 2], [2, 5, 6, 3], [5, 2, 6, 3], [5, 6, 2, 3], [5, 6, 3, 2], [2, 3, 6, 5], [3, 2, 6, 5], [3, 6, 2, 5], [3, 6, 5, 2], [2, 6, 3, 5], [6, 2, 3, 5], [6, 3, 2, 5], [6, 3, 5, 2], [2, 6, 5, 3], [6, 2, 5, 3], [6, 5, 2, 3], [6, 5, 3, 2], [2, 3, 4, 6], [3, 2, 4, 6], [3, 4, 2, 6], [3, 4, 6, 2], [2, 4, 3, 6], [4, 2, 3, 6], [4, 3, 2, 6], [4, 3, 6, 2], [2, 4, 6, 3], [4, 2, 6, 3], [4, 6, 2, 3], [4, 6, 3, 2], [2, 3, 6, 4], [3, 2, 6, 4], [3, 6, 2, 4], [3, 6, 4, 2], [2, 6, 3, 4], [6, 2, 3, 4], [6, 3, 2, 4], [6, 3, 4, 2], [2, 6, 4, 3], [6, 2, 4, 3], [6, 4, 2, 3], [6, 4, 3, 2], [2, 3, 4, 5], [3, 2, 4, 5], [3, 4, 2, 5], [3, 4, 5, 2], [2, 4, 3, 5], [4, 2, 3, 5], [4, 3, 2, 5], [4, 3, 5, 2], [2, 4, 5, 3], [4, 2, 5, 3], [4, 5, 2, 3], [4, 5, 3, 2], [2, 3, 5, 4], [3, 2, 5, 4], [3, 5, 2, 4], [3, 5, 4, 2], [2, 5, 3, 4], [5, 2, 3, 4], [5, 3, 2, 4], [5, 3, 4, 2], [2, 5, 4, 3], [5, 2, 4, 3], [5, 4, 2, 3], [5, 4, 3, 2], [1, 4, 5, 6], [4, 1, 5, 6], [4, 5, 1, 6], [4, 5, 6, 1], [1, 5, 4, 6], [5, 1, 4, 6], [5, 4, 1, 6], [5, 4, 6, 1], [1, 5, 6, 4], [5, 1, 6, 4], [5, 6, 1, 4], [5, 6, 4, 1], [1, 4, 6, 5], [4, 1, 6, 5], [4, 6, 1, 5], [4, 6, 5, 1], [1, 6, 4, 5], [6, 1, 4, 5], [6, 4, 1, 5], [6, 4, 5, 1], [1, 6, 5, 4], [6, 1, 5, 4], [6, 5, 1, 4], [6, 5, 4, 1], [1, 3, 5, 6], [3, 1, 5, 6], [3, 5, 1, 6], [3, 5, 6, 1], [1, 5, 3, 6], [5, 1, 3, 6], [5, 3, 1, 6], [5, 3, 6, 1], [1, 5, 6, 3], [5, 1, 6, 3], [5, 6, 1, 3], [5, 6, 3, 1], [1, 3, 6, 5], [3, 1, 6, 5], [3, 6, 1, 5], [3, 6, 5, 1], [1, 6, 3, 5], [6, 1, 3, 5], [6, 3, 1, 5], [6, 3, 5, 1], [1, 6, 5, 3], [6, 1, 5, 3], [6, 5, 1, 3], [6, 5, 3, 1], [1, 3, 4, 6], [3, 1, 4, 6], [3, 4, 1, 6], [3, 4, 6, 1], [1, 4, 3, 6], [4, 1, 3, 6], [4, 3, 1, 6], [4, 3, 6, 1], [1, 4, 6, 3], [4, 1, 6, 3], [4, 6, 1, 3], [4, 6, 3, 1], [1, 3, 6, 4], [3, 1, 6, 4], [3, 6, 1, 4], [3, 6, 4, 1], [1, 6, 3, 4], [6, 1, 3, 4], [6, 3, 1, 4], [6, 3, 4, 1], [1, 6, 4, 3], [6, 1, 4, 3], [6, 4, 1, 3], [6, 4, 3, 1], [1, 3, 4, 5], [3, 1, 4, 5], [3, 4, 1, 5], [3, 4, 5, 1], [1, 4, 3, 5], [4, 1, 3, 5], [4, 3, 1, 5], [4, 3, 5, 1], [1, 4, 5, 3], [4, 1, 5, 3], [4, 5, 1, 3], [4, 5, 3, 1], [1, 3, 5, 4], [3, 1, 5, 4], [3, 5, 1, 4], [3, 5, 4, 1], [1, 5, 3, 4], [5, 1, 3, 4], [5, 3, 1, 4], [5, 3, 4, 1], [1, 5, 4, 3], [5, 1, 4, 3], [5, 4, 1, 3], [5, 4, 3, 1], [1, 2, 5, 6], [2, 1, 5, 6], [2, 5, 1, 6], [2, 5, 6, 1], [1, 5, 2, 6], [5, 1, 2, 6], [5, 2, 1, 6], [5, 2, 6, 1], [1, 5, 6, 2], [5, 1, 6, 2], [5, 6, 1, 2], [5, 6, 2, 1], [1, 2, 6, 5], [2, 1, 6, 5], [2, 6, 1, 5], [2, 6, 5, 1], [1, 6, 2, 5], [6, 1, 2, 5], [6, 2, 1, 5], [6, 2, 5, 1], [1, 6, 5, 2], [6, 1, 5, 2], [6, 5, 1, 2], [6, 5, 2, 1], [1, 2, 4, 6], [2, 1, 4, 6], [2, 4, 1, 6], [2, 4, 6, 1], [1, 4, 2, 6], [4, 1, 2, 6], [4, 2, 1, 6], [4, 2, 6, 1], [1, 4, 6, 2], [4, 1, 6, 2], [4, 6, 1, 2], [4, 6, 2, 1], [1, 2, 6, 4], [2, 1, 6, 4], [2, 6, 1, 4], [2, 6, 4, 1], [1, 6, 2, 4], [6, 1, 2, 4], [6, 2, 1, 4], [6, 2, 4, 1], [1, 6, 4, 2], [6, 1, 4, 2], [6, 4, 1, 2], [6, 4, 2, 1], [1, 2, 4, 5], [2, 1, 4, 5], [2, 4, 1, 5], [2, 4, 5, 1], [1, 4, 2, 5], [4, 1, 2, 5], [4, 2, 1, 5], [4, 2, 5, 1], [1, 4, 5, 2], [4, 1, 5, 2], [4, 5, 1, 2], [4, 5, 2, 1], [1, 2, 5, 4], [2, 1, 5, 4], [2, 5, 1, 4], [2, 5, 4, 1], [1, 5, 2, 4], [5, 1, 2, 4], [5, 2, 1, 4], [5, 2, 4, 1], [1, 5, 4, 2], [5, 1, 4, 2], [5, 4, 1, 2], [5, 4, 2, 1], [1, 2, 3, 6], [2, 1, 3, 6], [2, 3, 1, 6], [2, 3, 6, 1], [1, 3, 2, 6], [3, 1, 2, 6], [3, 2, 1, 6], [3, 2, 6, 1], [1, 3, 6, 2], [3, 1, 6, 2], [3, 6, 1, 2], [3, 6, 2, 1], [1, 2, 6, 3], [2, 1, 6, 3], [2, 6, 1, 3], [2, 6, 3, 1], [1, 6, 2, 3], [6, 1, 2, 3], [6, 2, 1, 3], [6, 2, 3, 1], [1, 6, 3, 2], [6, 1, 3, 2], [6, 3, 1, 2], [6, 3, 2, 1], [1, 2, 3, 5], [2, 1, 3, 5], [2, 3, 1, 5], [2, 3, 5, 1], [1, 3, 2, 5], [3, 1, 2, 5], [3, 2, 1, 5], [3, 2, 5, 1], [1, 3, 5, 2], [3, 1, 5, 2], [3, 5, 1, 2], [3, 5, 2, 1], [1, 2, 5, 3], [2, 1, 5, 3], [2, 5, 1, 3], [2, 5, 3, 1], [1, 5, 2, 3], [5, 1, 2, 3], [5, 2, 1, 3], [5, 2, 3, 1], [1, 5, 3, 2], [5, 1, 3, 2], [5, 3, 1, 2], [5, 3, 2, 1], [1, 2, 3, 4], [2, 1, 3, 4], [2, 3, 1, 4], [2, 3, 4, 1], [1, 3, 2, 4], [3, 1, 2, 4], [3, 2, 1, 4], [3, 2, 4, 1], [1, 3, 4, 2], [3, 1, 4, 2], [3, 4, 1, 2], [3, 4, 2, 1], [1, 2, 4, 3], [2, 1, 4, 3], [2, 4, 1, 3], [2, 4, 3, 1], [1, 4, 2, 3], [4, 1, 2, 3], [4, 2, 1, 3], [4, 2, 3, 1], [1, 4, 3, 2], [4, 1, 3, 2], [4, 3, 1, 2], [4, 3, 2, 1]]
>>> mem
[[], [], [], [], [([1, 2, 3, 4, 5, 6], [[3, 4, 5, 6], [4, 3, 5, 6], [4, 5, 3, 6], [4, 5, 6, 3], [3, 5, 4, 6], [5, 3, 4, 6], [5, 4, 3, 6], [5, 4, 6, 3], [3, 5, 6, 4], [5, 3, 6, 4], [5, 6, 3, 4], [5, 6, 4, 3], [3, 4, 6, 5], [4, 3, 6, 5], [4, 6, 3, 5], [4, 6, 5, 3], [3, 6, 4, 5], [6, 3, 4, 5], [6, 4, 3, 5], [6, 4, 5, 3], [3, 6, 5, 4], [6, 3, 5, 4], [6, 5, 3, 4], [6, 5, 4, 3], [2, 4, 5, 6], [4, 2, 5, 6], [4, 5, 2, 6], [4, 5, 6, 2], [2, 5, 4, 6], [5, 2, 4, 6], [5, 4, 2, 6], [5, 4, 6, 2], [2, 5, 6, 4], [5, 2, 6, 4], [5, 6, 2, 4], [5, 6, 4, 2], [2, 4, 6, 5], [4, 2, 6, 5], [4, 6, 2, 5], [4, 6, 5, 2], [2, 6, 4, 5], [6, 2, 4, 5], [6, 4, 2, 5], [6, 4, 5, 2], [2, 6, 5, 4], [6, 2, 5, 4], [6, 5, 2, 4], [6, 5, 4, 2], [2, 3, 5, 6], [3, 2, 5, 6], [3, 5, 2, 6], [3, 5, 6, 2], [2, 5, 3, 6], [5, 2, 3, 6], [5, 3, 2, 6], [5, 3, 6, 2], [2, 5, 6, 3], [5, 2, 6, 3], [5, 6, 2, 3], [5, 6, 3, 2], [2, 3, 6, 5], [3, 2, 6, 5], [3, 6, 2, 5], [3, 6, 5, 2], [2, 6, 3, 5], [6, 2, 3, 5], [6, 3, 2, 5], [6, 3, 5, 2], [2, 6, 5, 3], [6, 2, 5, 3], [6, 5, 2, 3], [6, 5, 3, 2], [2, 3, 4, 6], [3, 2, 4, 6], [3, 4, 2, 6], [3, 4, 6, 2], [2, 4, 3, 6], [4, 2, 3, 6], [4, 3, 2, 6], [4, 3, 6, 2], [2, 4, 6, 3], [4, 2, 6, 3], [4, 6, 2, 3], [4, 6, 3, 2], [2, 3, 6, 4], [3, 2, 6, 4], [3, 6, 2, 4], [3, 6, 4, 2], [2, 6, 3, 4], [6, 2, 3, 4], [6, 3, 2, 4], [6, 3, 4, 2], [2, 6, 4, 3], [6, 2, 4, 3], [6, 4, 2, 3], [6, 4, 3, 2], [2, 3, 4, 5], [3, 2, 4, 5], [3, 4, 2, 5], [3, 4, 5, 2], [2, 4, 3, 5], [4, 2, 3, 5], [4, 3, 2, 5], [4, 3, 5, 2], [2, 4, 5, 3], [4, 2, 5, 3], [4, 5, 2, 3], [4, 5, 3, 2], [2, 3, 5, 4], [3, 2, 5, 4], [3, 5, 2, 4], [3, 5, 4, 2], [2, 5, 3, 4], [5, 2, 3, 4], [5, 3, 2, 4], [5, 3, 4, 2], [2, 5, 4, 3], [5, 2, 4, 3], [5, 4, 2, 3], [5, 4, 3, 2], [1, 4, 5, 6], [4, 1, 5, 6], [4, 5, 1, 6], [4, 5, 6, 1], [1, 5, 4, 6], [5, 1, 4, 6], [5, 4, 1, 6], [5, 4, 6, 1], [1, 5, 6, 4], [5, 1, 6, 4], [5, 6, 1, 4], [5, 6, 4, 1], [1, 4, 6, 5], [4, 1, 6, 5], [4, 6, 1, 5], [4, 6, 5, 1], [1, 6, 4, 5], [6, 1, 4, 5], [6, 4, 1, 5], [6, 4, 5, 1], [1, 6, 5, 4], [6, 1, 5, 4], [6, 5, 1, 4], [6, 5, 4, 1], [1, 3, 5, 6], [3, 1, 5, 6], [3, 5, 1, 6], [3, 5, 6, 1], [1, 5, 3, 6], [5, 1, 3, 6], [5, 3, 1, 6], [5, 3, 6, 1], [1, 5, 6, 3], [5, 1, 6, 3], [5, 6, 1, 3], [5, 6, 3, 1], [1, 3, 6, 5], [3, 1, 6, 5], [3, 6, 1, 5], [3, 6, 5, 1], [1, 6, 3, 5], [6, 1, 3, 5], [6, 3, 1, 5], [6, 3, 5, 1], [1, 6, 5, 3], [6, 1, 5, 3], [6, 5, 1, 3], [6, 5, 3, 1], [1, 3, 4, 6], [3, 1, 4, 6], [3, 4, 1, 6], [3, 4, 6, 1], [1, 4, 3, 6], [4, 1, 3, 6], [4, 3, 1, 6], [4, 3, 6, 1], [1, 4, 6, 3], [4, 1, 6, 3], [4, 6, 1, 3], [4, 6, 3, 1], [1, 3, 6, 4], [3, 1, 6, 4], [3, 6, 1, 4], [3, 6, 4, 1], [1, 6, 3, 4], [6, 1, 3, 4], [6, 3, 1, 4], [6, 3, 4, 1], [1, 6, 4, 3], [6, 1, 4, 3], [6, 4, 1, 3], [6, 4, 3, 1], [1, 3, 4, 5], [3, 1, 4, 5], [3, 4, 1, 5], [3, 4, 5, 1], [1, 4, 3, 5], [4, 1, 3, 5], [4, 3, 1, 5], [4, 3, 5, 1], [1, 4, 5, 3], [4, 1, 5, 3], [4, 5, 1, 3], [4, 5, 3, 1], [1, 3, 5, 4], [3, 1, 5, 4], [3, 5, 1, 4], [3, 5, 4, 1], [1, 5, 3, 4], [5, 1, 3, 4], [5, 3, 1, 4], [5, 3, 4, 1], [1, 5, 4, 3], [5, 1, 4, 3], [5, 4, 1, 3], [5, 4, 3, 1], [1, 2, 5, 6], [2, 1, 5, 6], [2, 5, 1, 6], [2, 5, 6, 1], [1, 5, 2, 6], [5, 1, 2, 6], [5, 2, 1, 6], [5, 2, 6, 1], [1, 5, 6, 2], [5, 1, 6, 2], [5, 6, 1, 2], [5, 6, 2, 1], [1, 2, 6, 5], [2, 1, 6, 5], [2, 6, 1, 5], [2, 6, 5, 1], [1, 6, 2, 5], [6, 1, 2, 5], [6, 2, 1, 5], [6, 2, 5, 1], [1, 6, 5, 2], [6, 1, 5, 2], [6, 5, 1, 2], [6, 5, 2, 1], [1, 2, 4, 6], [2, 1, 4, 6], [2, 4, 1, 6], [2, 4, 6, 1], [1, 4, 2, 6], [4, 1, 2, 6], [4, 2, 1, 6], [4, 2, 6, 1], [1, 4, 6, 2], [4, 1, 6, 2], [4, 6, 1, 2], [4, 6, 2, 1], [1, 2, 6, 4], [2, 1, 6, 4], [2, 6, 1, 4], [2, 6, 4, 1], [1, 6, 2, 4], [6, 1, 2, 4], [6, 2, 1, 4], [6, 2, 4, 1], [1, 6, 4, 2], [6, 1, 4, 2], [6, 4, 1, 2], [6, 4, 2, 1], [1, 2, 4, 5], [2, 1, 4, 5], [2, 4, 1, 5], [2, 4, 5, 1], [1, 4, 2, 5], [4, 1, 2, 5], [4, 2, 1, 5], [4, 2, 5, 1], [1, 4, 5, 2], [4, 1, 5, 2], [4, 5, 1, 2], [4, 5, 2, 1], [1, 2, 5, 4], [2, 1, 5, 4], [2, 5, 1, 4], [2, 5, 4, 1], [1, 5, 2, 4], [5, 1, 2, 4], [5, 2, 1, 4], [5, 2, 4, 1], [1, 5, 4, 2], [5, 1, 4, 2], [5, 4, 1, 2], [5, 4, 2, 1], [1, 2, 3, 6], [2, 1, 3, 6], [2, 3, 1, 6], [2, 3, 6, 1], [1, 3, 2, 6], [3, 1, 2, 6], [3, 2, 1, 6], [3, 2, 6, 1], [1, 3, 6, 2], [3, 1, 6, 2], [3, 6, 1, 2], [3, 6, 2, 1], [1, 2, 6, 3], [2, 1, 6, 3], [2, 6, 1, 3], [2, 6, 3, 1], [1, 6, 2, 3], [6, 1, 2, 3], [6, 2, 1, 3], [6, 2, 3, 1], [1, 6, 3, 2], [6, 1, 3, 2], [6, 3, 1, 2], [6, 3, 2, 1], [1, 2, 3, 5], [2, 1, 3, 5], [2, 3, 1, 5], [2, 3, 5, 1], [1, 3, 2, 5], [3, 1, 2, 5], [3, 2, 1, 5], [3, 2, 5, 1], [1, 3, 5, 2], [3, 1, 5, 2], [3, 5, 1, 2], [3, 5, 2, 1], [1, 2, 5, 3], [2, 1, 5, 3], [2, 5, 1, 3], [2, 5, 3, 1], [1, 5, 2, 3], [5, 1, 2, 3], [5, 2, 1, 3], [5, 2, 3, 1], [1, 5, 3, 2], [5, 1, 3, 2], [5, 3, 1, 2], [5, 3, 2, 1], [1, 2, 3, 4], [2, 1, 3, 4], [2, 3, 1, 4], [2, 3, 4, 1], [1, 3, 2, 4], [3, 1, 2, 4], [3, 2, 1, 4], [3, 2, 4, 1], [1, 3, 4, 2], [3, 1, 4, 2], [3, 4, 1, 2], [3, 4, 2, 1], [1, 2, 4, 3], [2, 1, 4, 3], [2, 4, 1, 3], [2, 4, 3, 1], [1, 4, 2, 3], [4, 1, 2, 3], [4, 2, 1, 3], [4, 2, 3, 1], [1, 4, 3, 2], [4, 1, 3, 2], [4, 3, 1, 2], [4, 3, 2, 1]])], [], [], [], [], []]
>>> mem = [[] for _ in range(10)]
>>> listKPermutationsDP(2,[1,2,3,4],mem)
[[3, 4], [4, 3], [2, 4], [4, 2], [2, 3], [3, 2], [1, 4], [4, 1], [1, 3], [3, 1], [1, 2], [2, 1]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> mem = [[] for _ in range(10)]
>>> listKPermutationsDP(2,[1,2,3,4],mem)
yay
yay
[[3, 4], [4, 3], [2, 4], [4, 2], [2, 3], [3, 2], [1, 4], [4, 1], [1, 3], [3, 1], [1, 2], [2, 1]]
>>> mem = [[] for _ in range(10)]
>>> len(listKPermutationsDP(4,[1,2,3,4,5,6],mem))
yay
yay
yay
yay
yay
yay
yay
yay
yay
360
>>> listKPermutationsDP(4,[1,2,3,4,5,6],mem)
yay
[[3, 4, 5, 6], [4, 3, 5, 6], [4, 5, 3, 6], [4, 5, 6, 3], [3, 5, 4, 6], [5, 3, 4, 6], [5, 4, 3, 6], [5, 4, 6, 3], [3, 5, 6, 4], [5, 3, 6, 4], [5, 6, 3, 4], [5, 6, 4, 3], [3, 4, 6, 5], [4, 3, 6, 5], [4, 6, 3, 5], [4, 6, 5, 3], [3, 6, 4, 5], [6, 3, 4, 5], [6, 4, 3, 5], [6, 4, 5, 3], [3, 6, 5, 4], [6, 3, 5, 4], [6, 5, 3, 4], [6, 5, 4, 3], [2, 4, 5, 6], [4, 2, 5, 6], [4, 5, 2, 6], [4, 5, 6, 2], [2, 5, 4, 6], [5, 2, 4, 6], [5, 4, 2, 6], [5, 4, 6, 2], [2, 5, 6, 4], [5, 2, 6, 4], [5, 6, 2, 4], [5, 6, 4, 2], [2, 4, 6, 5], [4, 2, 6, 5], [4, 6, 2, 5], [4, 6, 5, 2], [2, 6, 4, 5], [6, 2, 4, 5], [6, 4, 2, 5], [6, 4, 5, 2], [2, 6, 5, 4], [6, 2, 5, 4], [6, 5, 2, 4], [6, 5, 4, 2], [2, 3, 5, 6], [3, 2, 5, 6], [3, 5, 2, 6], [3, 5, 6, 2], [2, 5, 3, 6], [5, 2, 3, 6], [5, 3, 2, 6], [5, 3, 6, 2], [2, 5, 6, 3], [5, 2, 6, 3], [5, 6, 2, 3], [5, 6, 3, 2], [2, 3, 6, 5], [3, 2, 6, 5], [3, 6, 2, 5], [3, 6, 5, 2], [2, 6, 3, 5], [6, 2, 3, 5], [6, 3, 2, 5], [6, 3, 5, 2], [2, 6, 5, 3], [6, 2, 5, 3], [6, 5, 2, 3], [6, 5, 3, 2], [2, 3, 4, 6], [3, 2, 4, 6], [3, 4, 2, 6], [3, 4, 6, 2], [2, 4, 3, 6], [4, 2, 3, 6], [4, 3, 2, 6], [4, 3, 6, 2], [2, 4, 6, 3], [4, 2, 6, 3], [4, 6, 2, 3], [4, 6, 3, 2], [2, 3, 6, 4], [3, 2, 6, 4], [3, 6, 2, 4], [3, 6, 4, 2], [2, 6, 3, 4], [6, 2, 3, 4], [6, 3, 2, 4], [6, 3, 4, 2], [2, 6, 4, 3], [6, 2, 4, 3], [6, 4, 2, 3], [6, 4, 3, 2], [2, 3, 4, 5], [3, 2, 4, 5], [3, 4, 2, 5], [3, 4, 5, 2], [2, 4, 3, 5], [4, 2, 3, 5], [4, 3, 2, 5], [4, 3, 5, 2], [2, 4, 5, 3], [4, 2, 5, 3], [4, 5, 2, 3], [4, 5, 3, 2], [2, 3, 5, 4], [3, 2, 5, 4], [3, 5, 2, 4], [3, 5, 4, 2], [2, 5, 3, 4], [5, 2, 3, 4], [5, 3, 2, 4], [5, 3, 4, 2], [2, 5, 4, 3], [5, 2, 4, 3], [5, 4, 2, 3], [5, 4, 3, 2], [1, 4, 5, 6], [4, 1, 5, 6], [4, 5, 1, 6], [4, 5, 6, 1], [1, 5, 4, 6], [5, 1, 4, 6], [5, 4, 1, 6], [5, 4, 6, 1], [1, 5, 6, 4], [5, 1, 6, 4], [5, 6, 1, 4], [5, 6, 4, 1], [1, 4, 6, 5], [4, 1, 6, 5], [4, 6, 1, 5], [4, 6, 5, 1], [1, 6, 4, 5], [6, 1, 4, 5], [6, 4, 1, 5], [6, 4, 5, 1], [1, 6, 5, 4], [6, 1, 5, 4], [6, 5, 1, 4], [6, 5, 4, 1], [1, 3, 5, 6], [3, 1, 5, 6], [3, 5, 1, 6], [3, 5, 6, 1], [1, 5, 3, 6], [5, 1, 3, 6], [5, 3, 1, 6], [5, 3, 6, 1], [1, 5, 6, 3], [5, 1, 6, 3], [5, 6, 1, 3], [5, 6, 3, 1], [1, 3, 6, 5], [3, 1, 6, 5], [3, 6, 1, 5], [3, 6, 5, 1], [1, 6, 3, 5], [6, 1, 3, 5], [6, 3, 1, 5], [6, 3, 5, 1], [1, 6, 5, 3], [6, 1, 5, 3], [6, 5, 1, 3], [6, 5, 3, 1], [1, 3, 4, 6], [3, 1, 4, 6], [3, 4, 1, 6], [3, 4, 6, 1], [1, 4, 3, 6], [4, 1, 3, 6], [4, 3, 1, 6], [4, 3, 6, 1], [1, 4, 6, 3], [4, 1, 6, 3], [4, 6, 1, 3], [4, 6, 3, 1], [1, 3, 6, 4], [3, 1, 6, 4], [3, 6, 1, 4], [3, 6, 4, 1], [1, 6, 3, 4], [6, 1, 3, 4], [6, 3, 1, 4], [6, 3, 4, 1], [1, 6, 4, 3], [6, 1, 4, 3], [6, 4, 1, 3], [6, 4, 3, 1], [1, 3, 4, 5], [3, 1, 4, 5], [3, 4, 1, 5], [3, 4, 5, 1], [1, 4, 3, 5], [4, 1, 3, 5], [4, 3, 1, 5], [4, 3, 5, 1], [1, 4, 5, 3], [4, 1, 5, 3], [4, 5, 1, 3], [4, 5, 3, 1], [1, 3, 5, 4], [3, 1, 5, 4], [3, 5, 1, 4], [3, 5, 4, 1], [1, 5, 3, 4], [5, 1, 3, 4], [5, 3, 1, 4], [5, 3, 4, 1], [1, 5, 4, 3], [5, 1, 4, 3], [5, 4, 1, 3], [5, 4, 3, 1], [1, 2, 5, 6], [2, 1, 5, 6], [2, 5, 1, 6], [2, 5, 6, 1], [1, 5, 2, 6], [5, 1, 2, 6], [5, 2, 1, 6], [5, 2, 6, 1], [1, 5, 6, 2], [5, 1, 6, 2], [5, 6, 1, 2], [5, 6, 2, 1], [1, 2, 6, 5], [2, 1, 6, 5], [2, 6, 1, 5], [2, 6, 5, 1], [1, 6, 2, 5], [6, 1, 2, 5], [6, 2, 1, 5], [6, 2, 5, 1], [1, 6, 5, 2], [6, 1, 5, 2], [6, 5, 1, 2], [6, 5, 2, 1], [1, 2, 4, 6], [2, 1, 4, 6], [2, 4, 1, 6], [2, 4, 6, 1], [1, 4, 2, 6], [4, 1, 2, 6], [4, 2, 1, 6], [4, 2, 6, 1], [1, 4, 6, 2], [4, 1, 6, 2], [4, 6, 1, 2], [4, 6, 2, 1], [1, 2, 6, 4], [2, 1, 6, 4], [2, 6, 1, 4], [2, 6, 4, 1], [1, 6, 2, 4], [6, 1, 2, 4], [6, 2, 1, 4], [6, 2, 4, 1], [1, 6, 4, 2], [6, 1, 4, 2], [6, 4, 1, 2], [6, 4, 2, 1], [1, 2, 4, 5], [2, 1, 4, 5], [2, 4, 1, 5], [2, 4, 5, 1], [1, 4, 2, 5], [4, 1, 2, 5], [4, 2, 1, 5], [4, 2, 5, 1], [1, 4, 5, 2], [4, 1, 5, 2], [4, 5, 1, 2], [4, 5, 2, 1], [1, 2, 5, 4], [2, 1, 5, 4], [2, 5, 1, 4], [2, 5, 4, 1], [1, 5, 2, 4], [5, 1, 2, 4], [5, 2, 1, 4], [5, 2, 4, 1], [1, 5, 4, 2], [5, 1, 4, 2], [5, 4, 1, 2], [5, 4, 2, 1], [1, 2, 3, 6], [2, 1, 3, 6], [2, 3, 1, 6], [2, 3, 6, 1], [1, 3, 2, 6], [3, 1, 2, 6], [3, 2, 1, 6], [3, 2, 6, 1], [1, 3, 6, 2], [3, 1, 6, 2], [3, 6, 1, 2], [3, 6, 2, 1], [1, 2, 6, 3], [2, 1, 6, 3], [2, 6, 1, 3], [2, 6, 3, 1], [1, 6, 2, 3], [6, 1, 2, 3], [6, 2, 1, 3], [6, 2, 3, 1], [1, 6, 3, 2], [6, 1, 3, 2], [6, 3, 1, 2], [6, 3, 2, 1], [1, 2, 3, 5], [2, 1, 3, 5], [2, 3, 1, 5], [2, 3, 5, 1], [1, 3, 2, 5], [3, 1, 2, 5], [3, 2, 1, 5], [3, 2, 5, 1], [1, 3, 5, 2], [3, 1, 5, 2], [3, 5, 1, 2], [3, 5, 2, 1], [1, 2, 5, 3], [2, 1, 5, 3], [2, 5, 1, 3], [2, 5, 3, 1], [1, 5, 2, 3], [5, 1, 2, 3], [5, 2, 1, 3], [5, 2, 3, 1], [1, 5, 3, 2], [5, 1, 3, 2], [5, 3, 1, 2], [5, 3, 2, 1], [1, 2, 3, 4], [2, 1, 3, 4], [2, 3, 1, 4], [2, 3, 4, 1], [1, 3, 2, 4], [3, 1, 2, 4], [3, 2, 1, 4], [3, 2, 4, 1], [1, 3, 4, 2], [3, 1, 4, 2], [3, 4, 1, 2], [3, 4, 2, 1], [1, 2, 4, 3], [2, 1, 4, 3], [2, 4, 1, 3], [2, 4, 3, 1], [1, 4, 2, 3], [4, 1, 2, 3], [4, 2, 1, 3], [4, 2, 3, 1], [1, 4, 3, 2], [4, 1, 3, 2], [4, 3, 1, 2], [4, 3, 2, 1]]
>>> listKPermutationsDP(3,[1,2,3,4,5,6],mem)
yay
yay
yay
[[4, 5, 6], [5, 4, 6], [5, 6, 4], [4, 6, 5], [6, 4, 5], [6, 5, 4], [3, 5, 6], [5, 3, 6], [5, 6, 3], [3, 6, 5], [6, 3, 5], [6, 5, 3], [3, 4, 6], [4, 3, 6], [4, 6, 3], [3, 6, 4], [6, 3, 4], [6, 4, 3], [3, 4, 5], [4, 3, 5], [4, 5, 3], [3, 5, 4], [5, 3, 4], [5, 4, 3], [2, 5, 6], [5, 2, 6], [5, 6, 2], [2, 6, 5], [6, 2, 5], [6, 5, 2], [2, 4, 6], [4, 2, 6], [4, 6, 2], [2, 6, 4], [6, 2, 4], [6, 4, 2], [2, 4, 5], [4, 2, 5], [4, 5, 2], [2, 5, 4], [5, 2, 4], [5, 4, 2], [2, 3, 6], [3, 2, 6], [3, 6, 2], [2, 6, 3], [6, 2, 3], [6, 3, 2], [2, 3, 5], [3, 2, 5], [3, 5, 2], [2, 5, 3], [5, 2, 3], [5, 3, 2], [2, 3, 4], [3, 2, 4], [3, 4, 2], [2, 4, 3], [4, 2, 3], [4, 3, 2], [1, 5, 6], [5, 1, 6], [5, 6, 1], [1, 6, 5], [6, 1, 5], [6, 5, 1], [1, 4, 6], [4, 1, 6], [4, 6, 1], [1, 6, 4], [6, 1, 4], [6, 4, 1], [1, 4, 5], [4, 1, 5], [4, 5, 1], [1, 5, 4], [5, 1, 4], [5, 4, 1], [1, 3, 6], [3, 1, 6], [3, 6, 1], [1, 6, 3], [6, 1, 3], [6, 3, 1], [1, 3, 5], [3, 1, 5], [3, 5, 1], [1, 5, 3], [5, 1, 3], [5, 3, 1], [1, 3, 4], [3, 1, 4], [3, 4, 1], [1, 4, 3], [4, 1, 3], [4, 3, 1], [1, 2, 6], [2, 1, 6], [2, 6, 1], [1, 6, 2], [6, 1, 2], [6, 2, 1], [1, 2, 5], [2, 1, 5], [2, 5, 1], [1, 5, 2], [5, 1, 2], [5, 2, 1], [1, 2, 4], [2, 1, 4], [2, 4, 1], [1, 4, 2], [4, 1, 2], [4, 2, 1], [1, 2, 3], [2, 1, 3], [2, 3, 1], [1, 3, 2], [3, 1, 2], [3, 2, 1]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> mem = [[] for _ in range(10)]
>>> listKPermutationsDP(2,[1,2,3,4],mem)
[[4]]
[[4], [3]]
[[3, 4], [4, 3], [2, 4], [4, 2], [2, 3], [3, 2], [1, 4], [4, 1], [1, 3], [3, 1], [1, 2], [2, 1]]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> consecutivity([1,2,3,4], False, False);
4
>>> consecutivity([1,2,4,5,6,0,-1], False, False);
3
>>> consecutivity([1,3,5,2,6], False, False);
1
>>> p4 = listPermutations([1,2,3,4])
>>> for i in p4:
	print(i, consecutivity(i, False, False));

	
[1, 2, 3, 4] 4
[2, 1, 3, 4] 2
[2, 3, 1, 4] 2
[2, 3, 4, 1] 3
[1, 3, 2, 4] 2
[3, 1, 2, 4] 2
[3, 2, 1, 4] 3
[3, 2, 4, 1] 2
[1, 3, 4, 2] 2
[3, 1, 4, 2] 1
[3, 4, 1, 2] 2
[3, 4, 2, 1] 2
[1, 2, 4, 3] 2
[2, 1, 4, 3] 2
[2, 4, 1, 3] 1
[2, 4, 3, 1] 2
[1, 4, 2, 3] 2
[4, 1, 2, 3] 3
[4, 2, 1, 3] 2
[4, 2, 3, 1] 2
[1, 4, 3, 2] 3
[4, 1, 3, 2] 2
[4, 3, 1, 2] 2
[4, 3, 2, 1] 4
>>> for i in p4:
	print(i, consecutivity(i, True, False));

	
[1, 2, 3, 4] 4
Traceback (most recent call last):
  File "<pyshell#226>", line 2, in <module>
    print(i, consecutivity(i, True, False));
  File "/Users/admin/Documents/Restricted nPk/Restricted Permutations.py", line 70, in consecutivity
    if diff!=1 and diff!=n-1: #end streak
NameError: name 'n' is not defined
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> p4 = listPermutations([1,2,3,4])
>>> for i in p4:
	print(i, consecutivity(i, True, False));

	
[1, 2, 3, 4] 4
[2, 1, 3, 4] 2
[2, 3, 1, 4] 2
[2, 3, 4, 1] 4
[1, 3, 2, 4] 2
[3, 1, 2, 4] 2
[3, 2, 1, 4] 4
[3, 2, 4, 1] 2
[1, 3, 4, 2] 2
[3, 1, 4, 2] 2
[3, 4, 1, 2] 4
[3, 4, 2, 1] 2
[1, 2, 4, 3] 2
[2, 1, 4, 3] 4
[2, 4, 1, 3] 2
[2, 4, 3, 1] 2
[1, 4, 2, 3] 2
[4, 1, 2, 3] 4
[4, 2, 1, 3] 2
[4, 2, 3, 1] 2
[1, 4, 3, 2] 4
[4, 1, 3, 2] 2
[4, 3, 1, 2] 2
[4, 3, 2, 1] 4
>>> for i in p4:
	print(i, consecutivity(i, True, True));

	
Traceback (most recent call last):
  File "<pyshell#233>", line 2, in <module>
    print(i, consecutivity(i, True, True));
  File "/Users/admin/Documents/Restricted nPk/Restricted Permutations.py", line 103, in consecutivity
    diffSE = abs(permutations[0]-permutations[-1]);
NameError: name 'permutations' is not defined
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> p4 = listPermutations([1,2,3,4])
>>> for i in p4:
	print(i, consecutivity(i, True, True));

	
[1, 2, 3, 4] 6
[2, 1, 3, 4] 2
[2, 3, 1, 4] 2
[2, 3, 4, 1] 6
[1, 3, 2, 4] 2
[3, 1, 2, 4] 2
[3, 2, 1, 4] 6
[3, 2, 4, 1] 2
[1, 3, 4, 2] 2
[3, 1, 4, 2] 2
[3, 4, 1, 2] 6
[3, 4, 2, 1] 2
[1, 2, 4, 3] 2
[2, 1, 4, 3] 6
[2, 4, 1, 3] 2
[2, 4, 3, 1] 2
[1, 4, 2, 3] 2
[4, 1, 2, 3] 6
[4, 2, 1, 3] 2
[4, 2, 3, 1] 2
[1, 4, 3, 2] 6
[4, 1, 3, 2] 2
[4, 3, 1, 2] 2
[4, 3, 2, 1] 6
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> p4 = listPermutations([1,2,3,4])
>>> for i in p4:
	print(i, consecutivity(i, True, True));

	
[1, 2, 3, 4] 6
[2, 1, 3, 4] 2
[2, 3, 1, 4] 2
[2, 3, 4, 1] 6
[1, 3, 2, 4] 2
[3, 1, 2, 4] 2
[3, 2, 1, 4] 6
[3, 2, 4, 1] 2
[1, 3, 4, 2] 2
[3, 1, 4, 2] 2
[3, 4, 1, 2] 6
[3, 4, 2, 1] 2
[1, 2, 4, 3] 2
[2, 1, 4, 3] 6
[2, 4, 1, 3] 2
[2, 4, 3, 1] 2
[1, 4, 2, 3] 2
[4, 1, 2, 3] 6
[4, 2, 1, 3] 2
[4, 2, 3, 1] 2
[1, 4, 3, 2] 6
[4, 1, 3, 2] 2
[4, 3, 1, 2] 2
[4, 3, 2, 1] 6
>>> consecutivity([1,2,3,4],True, True);
6
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> consecutivity([1,2,3,4],True, True);
6
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> consecutivity([1,2,3,4],True, True);
6
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> consecutivity([1,2,3,4],True, True);
1 5
6
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> consecutivity([1,2,3,4],True, True);
1 4
5
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> consecutivity([1,2,3,4],True, True);
4
>>> p4 = listPermutations([1,2,3,4])
>>> for i in p4:
	print(i, consecutivity(i, True, True));

	
[1, 2, 3, 4] 4
[2, 1, 3, 4] 2
[2, 3, 1, 4] 2
[2, 3, 4, 1] 4
[1, 3, 2, 4] 2
[3, 1, 2, 4] 2
[3, 2, 1, 4] 4
[3, 2, 4, 1] 2
[1, 3, 4, 2] 2
[3, 1, 4, 2] 2
[3, 4, 1, 2] 4
[3, 4, 2, 1] 2
[1, 2, 4, 3] 2
[2, 1, 4, 3] 4
[2, 4, 1, 3] 2
[2, 4, 3, 1] 2
[1, 4, 2, 3] 2
[4, 1, 2, 3] 4
[4, 2, 1, 3] 2
[4, 2, 3, 1] 2
[1, 4, 3, 2] 4
[4, 1, 3, 2] 2
[4, 3, 1, 2] 2
[4, 3, 2, 1] 4
>>> for i in p4:
	print(i, consecutivity(i, False, True));

	
[1, 2, 3, 4] 4
[2, 1, 3, 4] 2
[2, 3, 1, 4] 2
[2, 3, 4, 1] 4
[1, 3, 2, 4] 2
[3, 1, 2, 4] 2
[3, 2, 1, 4] 4
[3, 2, 4, 1] 2
[1, 3, 4, 2] 2
[3, 1, 4, 2] 2
[3, 4, 1, 2] 4
[3, 4, 2, 1] 2
[1, 2, 4, 3] 2
[2, 1, 4, 3] 4
[2, 4, 1, 3] 2
[2, 4, 3, 1] 2
[1, 4, 2, 3] 2
[4, 1, 2, 3] 4
[4, 2, 1, 3] 2
[4, 2, 3, 1] 2
[1, 4, 3, 2] 4
[4, 1, 3, 2] 2
[4, 3, 1, 2] 2
[4, 3, 2, 1] 4
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> p4 = listPermutations([1,2,3,4])
>>> for i in p4:
	print(i, consecutivity(i, False, True));

	
[1, 2, 3, 4] 4
[2, 1, 3, 4] 2
[2, 3, 1, 4] 2
[2, 3, 4, 1] 4
[1, 3, 2, 4] 2
[3, 1, 2, 4] 2
[3, 2, 1, 4] 4
[3, 2, 4, 1] 2
[1, 3, 4, 2] 2
[3, 1, 4, 2] 2
[3, 4, 1, 2] 4
[3, 4, 2, 1] 2
[1, 2, 4, 3] 2
[2, 1, 4, 3] 4
[2, 4, 1, 3] 2
[2, 4, 3, 1] 2
[1, 4, 2, 3] 2
[4, 1, 2, 3] 4
[4, 2, 1, 3] 2
[4, 2, 3, 1] 2
[1, 4, 3, 2] 4
[4, 1, 3, 2] 2
[4, 3, 1, 2] 2
[4, 3, 2, 1] 4
>>> consecutivity([4,5,2,1,3],False, True);
3
>>> consecutivity([4,5,2,1,3],False, True);
3
>>> consecutivity([4,5,1,3,2],False, True);
2
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> consecutivity([4,5,1,2,6,3],True, True);
2
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> consecutivity([4,5,1,2,6,3],True, True);
3
>>> consecutivity([5,6,1,3,2,4],True, True);
4
>>> consecutivity([5,6,1,3,2,4],False, True);
3
>>> range(1,10)
range(1, 10)
>>> x = range(1,10)
>>> x
range(1, 10)
>>> x = list(range(1,10))
>>> x
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> PBash(9,4,2,False,False)
47622
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> PBash(9,4,2,False,False)
1332
>>> PBash(9,4,2,True,False)
592
>>> consecutivity([5,6,1,3,2,4],True,False);
3
>>> p64 = listKPermutations(4,[1,2,3,4,5,6])
>>> for i in p64:
	print(i, consecutivity(i, True, False));

	
[3, 4, 5, 6] 4
[4, 3, 5, 6] 2
[4, 5, 3, 6] 2
[4, 5, 6, 3] 4
[3, 5, 4, 6] 2
[5, 3, 4, 6] 2
[5, 4, 3, 6] 4
[5, 4, 6, 3] 2
[3, 5, 6, 4] 2
[5, 3, 6, 4] 2
[5, 6, 3, 4] 4
[5, 6, 4, 3] 2
[3, 4, 6, 5] 2
[4, 3, 6, 5] 4
[4, 6, 3, 5] 2
[4, 6, 5, 3] 2
[3, 6, 4, 5] 2
[6, 3, 4, 5] 4
[6, 4, 3, 5] 2
[6, 4, 5, 3] 2
[3, 6, 5, 4] 4
[6, 3, 5, 4] 2
[6, 5, 3, 4] 2
[6, 5, 4, 3] 4
[2, 4, 5, 6] 3
[4, 2, 5, 6] 3
[4, 5, 2, 6] 3
[4, 5, 6, 2] 3
[2, 5, 4, 6] 3
[5, 2, 4, 6] 2
[5, 4, 2, 6] 2
[5, 4, 6, 2] 2
[2, 5, 6, 4] 3
[5, 2, 6, 4] 2
[5, 6, 2, 4] 2
[5, 6, 4, 2] 2
[2, 4, 6, 5] 2
[4, 2, 6, 5] 2
[4, 6, 2, 5] 2
[4, 6, 5, 2] 3
[2, 6, 4, 5] 2
[6, 2, 4, 5] 2
[6, 4, 2, 5] 2
[6, 4, 5, 2] 3
[2, 6, 5, 4] 3
[6, 2, 5, 4] 3
[6, 5, 2, 4] 3
[6, 5, 4, 2] 3
[2, 3, 5, 6] 2
[3, 2, 5, 6] 4
[3, 5, 2, 6] 2
[3, 5, 6, 2] 2
[2, 5, 3, 6] 2
[5, 2, 3, 6] 4
[5, 3, 2, 6] 2
[5, 3, 6, 2] 2
[2, 5, 6, 3] 4
[5, 2, 6, 3] 2
[5, 6, 2, 3] 2
[5, 6, 3, 2] 4
[2, 3, 6, 5] 4
[3, 2, 6, 5] 2
[3, 6, 2, 5] 2
[3, 6, 5, 2] 4
[2, 6, 3, 5] 2
[6, 2, 3, 5] 2
[6, 3, 2, 5] 4
[6, 3, 5, 2] 2
[2, 6, 5, 3] 2
[6, 2, 5, 3] 2
[6, 5, 2, 3] 4
[6, 5, 3, 2] 2
[2, 3, 4, 6] 3
[3, 2, 4, 6] 2
[3, 4, 2, 6] 2
[3, 4, 6, 2] 2
[2, 4, 3, 6] 3
[4, 2, 3, 6] 3
[4, 3, 2, 6] 3
[4, 3, 6, 2] 3
[2, 4, 6, 3] 2
[4, 2, 6, 3] 2
[4, 6, 2, 3] 2
[4, 6, 3, 2] 3
[2, 3, 6, 4] 3
[3, 2, 6, 4] 2
[3, 6, 2, 4] 2
[3, 6, 4, 2] 2
[2, 6, 3, 4] 3
[6, 2, 3, 4] 3
[6, 3, 2, 4] 3
[6, 3, 4, 2] 3
[2, 6, 4, 3] 2
[6, 2, 4, 3] 2
[6, 4, 2, 3] 2
[6, 4, 3, 2] 3
[2, 3, 4, 5] 4
[3, 2, 4, 5] 2
[3, 4, 2, 5] 2
[3, 4, 5, 2] 4
[2, 4, 3, 5] 2
[4, 2, 3, 5] 2
[4, 3, 2, 5] 4
[4, 3, 5, 2] 2
[2, 4, 5, 3] 2
[4, 2, 5, 3] 2
[4, 5, 2, 3] 4
[4, 5, 3, 2] 2
[2, 3, 5, 4] 2
[3, 2, 5, 4] 4
[3, 5, 2, 4] 2
[3, 5, 4, 2] 2
[2, 5, 3, 4] 2
[5, 2, 3, 4] 4
[5, 3, 2, 4] 2
[5, 3, 4, 2] 2
[2, 5, 4, 3] 4
[5, 2, 4, 3] 2
[5, 4, 2, 3] 2
[5, 4, 3, 2] 4
[1, 4, 5, 6] 4
[4, 1, 5, 6] 2
[4, 5, 1, 6] 2
[4, 5, 6, 1] 3
[1, 5, 4, 6] 2
[5, 1, 4, 6] 2
[5, 4, 1, 6] 3
[5, 4, 6, 1] 2
[1, 5, 6, 4] 2
[5, 1, 6, 4] 1
[5, 6, 1, 4] 2
[5, 6, 4, 1] 2
[1, 4, 6, 5] 2
[4, 1, 6, 5] 2
[4, 6, 1, 5] 1
[4, 6, 5, 1] 2
[1, 6, 4, 5] 2
[6, 1, 4, 5] 3
[6, 4, 1, 5] 2
[6, 4, 5, 1] 2
[1, 6, 5, 4] 3
[6, 1, 5, 4] 2
[6, 5, 1, 4] 2
[6, 5, 4, 1] 4
[1, 3, 5, 6] 2
[3, 1, 5, 6] 2
[3, 5, 1, 6] 1
[3, 5, 6, 1] 2
[1, 5, 3, 6] 2
[5, 1, 3, 6] 2
[5, 3, 1, 6] 1
[5, 3, 6, 1] 2
[1, 5, 6, 3] 3
[5, 1, 6, 3] 2
[5, 6, 1, 3] 2
[5, 6, 3, 1] 3
[1, 3, 6, 5] 3
[3, 1, 6, 5] 2
[3, 6, 1, 5] 2
[3, 6, 5, 1] 3
[1, 6, 3, 5] 2
[6, 1, 3, 5] 1
[6, 3, 1, 5] 2
[6, 3, 5, 1] 2
[1, 6, 5, 3] 2
[6, 1, 5, 3] 1
[6, 5, 1, 3] 2
[6, 5, 3, 1] 2
[1, 3, 4, 6] 2
[3, 1, 4, 6] 2
[3, 4, 1, 6] 3
[3, 4, 6, 1] 2
[1, 4, 3, 6] 4
[4, 1, 3, 6] 2
[4, 3, 1, 6] 2
[4, 3, 6, 1] 3
[1, 4, 6, 3] 2
[4, 1, 6, 3] 2
[4, 6, 1, 3] 1
[4, 6, 3, 1] 2
[1, 3, 6, 4] 2
[3, 1, 6, 4] 1
[3, 6, 1, 4] 2
[3, 6, 4, 1] 2
[1, 6, 3, 4] 3
[6, 1, 3, 4] 2
[6, 3, 1, 4] 2
[6, 3, 4, 1] 4
[1, 6, 4, 3] 2
[6, 1, 4, 3] 3
[6, 4, 1, 3] 2
[6, 4, 3, 1] 2
[1, 3, 4, 5] 3
[3, 1, 4, 5] 3
[3, 4, 1, 5] 3
[3, 4, 5, 1] 3
[1, 4, 3, 5] 3
[4, 1, 3, 5] 2
[4, 3, 1, 5] 2
[4, 3, 5, 1] 2
[1, 4, 5, 3] 3
[4, 1, 5, 3] 2
[4, 5, 1, 3] 2
[4, 5, 3, 1] 2
[1, 3, 5, 4] 2
[3, 1, 5, 4] 2
[3, 5, 1, 4] 2
[3, 5, 4, 1] 3
[1, 5, 3, 4] 2
[5, 1, 3, 4] 2
[5, 3, 1, 4] 2
[5, 3, 4, 1] 3
[1, 5, 4, 3] 3
[5, 1, 4, 3] 3
[5, 4, 1, 3] 3
[5, 4, 3, 1] 3
[1, 2, 5, 6] 4
[2, 1, 5, 6] 2
[2, 5, 1, 6] 2
[2, 5, 6, 1] 3
[1, 5, 2, 6] 2
[5, 1, 2, 6] 2
[5, 2, 1, 6] 3
[5, 2, 6, 1] 2
[1, 5, 6, 2] 2
[5, 1, 6, 2] 1
[5, 6, 1, 2] 2
[5, 6, 2, 1] 2
[1, 2, 6, 5] 2
[2, 1, 6, 5] 2
[2, 6, 1, 5] 1
[2, 6, 5, 1] 2
[1, 6, 2, 5] 2
[6, 1, 2, 5] 3
[6, 2, 1, 5] 2
[6, 2, 5, 1] 2
[1, 6, 5, 2] 3
[6, 1, 5, 2] 2
[6, 5, 1, 2] 2
[6, 5, 2, 1] 4
[1, 2, 4, 6] 2
[2, 1, 4, 6] 3
[2, 4, 1, 6] 2
[2, 4, 6, 1] 1
[1, 4, 2, 6] 2
[4, 1, 2, 6] 3
[4, 2, 1, 6] 2
[4, 2, 6, 1] 1
[1, 4, 6, 2] 2
[4, 1, 6, 2] 2
[4, 6, 1, 2] 2
[4, 6, 2, 1] 2
[1, 2, 6, 4] 2
[2, 1, 6, 4] 2
[2, 6, 1, 4] 2
[2, 6, 4, 1] 2
[1, 6, 2, 4] 1
[6, 1, 2, 4] 2
[6, 2, 1, 4] 3
[6, 2, 4, 1] 2
[1, 6, 4, 2] 1
[6, 1, 4, 2] 2
[6, 4, 1, 2] 3
[6, 4, 2, 1] 2
[1, 2, 4, 5] 2
[2, 1, 4, 5] 4
[2, 4, 1, 5] 2
[2, 4, 5, 1] 2
[1, 4, 2, 5] 2
[4, 1, 2, 5] 4
[4, 2, 1, 5] 2
[4, 2, 5, 1] 2
[1, 4, 5, 2] 4
[4, 1, 5, 2] 2
[4, 5, 1, 2] 2
[4, 5, 2, 1] 4
[1, 2, 5, 4] 4
[2, 1, 5, 4] 2
[2, 5, 1, 4] 2
[2, 5, 4, 1] 4
[1, 5, 2, 4] 2
[5, 1, 2, 4] 2
[5, 2, 1, 4] 4
[5, 2, 4, 1] 2
[1, 5, 4, 2] 2
[5, 1, 4, 2] 2
[5, 4, 1, 2] 4
[5, 4, 2, 1] 2
[1, 2, 3, 6] 4
[2, 1, 3, 6] 2
[2, 3, 1, 6] 2
[2, 3, 6, 1] 3
[1, 3, 2, 6] 2
[3, 1, 2, 6] 2
[3, 2, 1, 6] 3
[3, 2, 6, 1] 2
[1, 3, 6, 2] 2
[3, 1, 6, 2] 1
[3, 6, 1, 2] 2
[3, 6, 2, 1] 2
[1, 2, 6, 3] 2
[2, 1, 6, 3] 2
[2, 6, 1, 3] 1
[2, 6, 3, 1] 2
[1, 6, 2, 3] 2
[6, 1, 2, 3] 3
[6, 2, 1, 3] 2
[6, 2, 3, 1] 2
[1, 6, 3, 2] 3
[6, 1, 3, 2] 2
[6, 3, 1, 2] 2
[6, 3, 2, 1] 4
[1, 2, 3, 5] 3
[2, 1, 3, 5] 2
[2, 3, 1, 5] 2
[2, 3, 5, 1] 2
[1, 3, 2, 5] 3
[3, 1, 2, 5] 3
[3, 2, 1, 5] 3
[3, 2, 5, 1] 3
[1, 3, 5, 2] 2
[3, 1, 5, 2] 2
[3, 5, 1, 2] 2
[3, 5, 2, 1] 3
[1, 2, 5, 3] 3
[2, 1, 5, 3] 2
[2, 5, 1, 3] 2
[2, 5, 3, 1] 2
[1, 5, 2, 3] 3
[5, 1, 2, 3] 3
[5, 2, 1, 3] 3
[5, 2, 3, 1] 3
[1, 5, 3, 2] 2
[5, 1, 3, 2] 2
[5, 3, 1, 2] 2
[5, 3, 2, 1] 3
[1, 2, 3, 4] 4
[2, 1, 3, 4] 2
[2, 3, 1, 4] 2
[2, 3, 4, 1] 4
[1, 3, 2, 4] 2
[3, 1, 2, 4] 2
[3, 2, 1, 4] 4
[3, 2, 4, 1] 2
[1, 3, 4, 2] 2
[3, 1, 4, 2] 2
[3, 4, 1, 2] 4
[3, 4, 2, 1] 2
[1, 2, 4, 3] 2
[2, 1, 4, 3] 4
[2, 4, 1, 3] 2
[2, 4, 3, 1] 2
[1, 4, 2, 3] 2
[4, 1, 2, 3] 4
[4, 2, 1, 3] 2
[4, 2, 3, 1] 2
[1, 4, 3, 2] 4
[4, 1, 3, 2] 2
[4, 3, 1, 2] 2
[4, 3, 2, 1] 4
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> PBash(9,4,2,True,False)
1170
>>> PBash(9,4,2,True,True)
792
>>> PBash(6, 4, 2, False, True)
48
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> BBash(9,4,2)
81
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> BBash(9,4,2)
162
>>> BBash(8,4,3)
176
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> BBash(8,4,3)
Traceback (most recent call last):
  File "<pyshell#280>", line 1, in <module>
    BBash(8,4,3)
NameError: name 'BBash' is not defined
>>> OBash(9,4,2)
162
>>> OBash(8,4,3)
142
>>> OBash(8,5,3)
708
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> UBash(6,4,2)
18
>>> UBash(4,2,2)
2
>>> UBash(5,3,2)
4
>>> for n in range(10):
	for k in range(10):
		print(UBash(n, k, 2),"\t");
	print();

	
0 	
0 	
0 	
0 	
0 	
0 	
0 	
0 	
0 	
0 	

0 	
0 	
0 	
0 	
0 	
0 	
0 	
0 	
0 	
0 	

0 	
0 	
0 	
0 	
0 	
0 	
0 	
0 	
0 	
0 	

0 	
0 	
2 	
0 	
0 	
0 	
0 	
0 	
0 	
0 	

0 	
0 	
2 	
0 	
0 	
0 	
0 	
0 	
0 	
0 	

0 	
0 	
2 	
4 	
6 	
0 	
0 	
0 	
0 	
0 	

0 	
0 	
2 	
8 	
18 	
16 	
20 	
0 	
0 	
0 	

0 	
0 	
2 	
12 	
42 	
88 	
150 	
120 	
0 	
0 	

0 	
0 	
2 	
16 	
78 	
256 	
650 	
1104 	
952 	
0 	

0 	
0 	
2 	
20 	
126 	
568 	
2010 	
5292 	
9254 	
8000 	

>>> for n in range(10):
	row = '';
	for k in range(10):
		row += UBash(n, k, 2) + '\t';
	print(row);

	
Traceback (most recent call last):
  File "<pyshell#293>", line 4, in <module>
    row += UBash(n, k, 2) + '\t';
TypeError: unsupported operand type(s) for +: 'int' and 'str'
>>> for n in range(10):
	row = '';
	for k in range(10):
		row += str(UBash(n, k, 2)) + '\t';
	print(row);

	
0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	0	0	0	
0	0	2	0	0	0	0	0	0	0	
0	0	2	0	0	0	0	0	0	0	
0	0	2	4	6	0	0	0	0	0	
0	0	2	8	18	16	20	0	0	0	
0	0	2	12	42	88	150	120	0	0	
0	0	2	16	78	256	650	1104	952	0	
0	0	2	20	126	568	2010	5292	9254	8000	
>>> for n in range(10):
	row = '';
	for k in range(n+1):
		z = PBash(n, k, 2, False, True) - PBash(n, k, 2, True, True) - UBash(n, k, 2);
		row += str(z) + '\t';
	print(row)

	
0	
0	0	
0	0	0	
0	0	0	0	
0	0	0	0	0	
0	0	0	2	2	0	
0	0	0	4	6	4	4	
0	0	0	6	14	22	30	20	
0	0	0	8	26	64	130	184	136	
0	0	0	10	42	142	402	882	1322	1000	
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> for n in range(10):
	row = '';
	for k in range(n+1):
		row += str(ZBash(n, k, 2)) + '\t';
	print(row);

	
Traceback (most recent call last):
  File "<pyshell#308>", line 4, in <module>
    row += str(ZBash(n, k, 2)) + '\t';
  File "/Users/admin/Documents/Restricted nPk/Restricted Permutations.py", line 290, in ZBash
    if consecutivity(n, p, False, False)<j and backToBase(n,p):
  File "/Users/admin/Documents/Restricted nPk/Restricted Permutations.py", line 125, in backToBase
    if abs(permutation[0]-permutation[-1]) == n-1:
IndexError: list index out of range
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> for n in range(10):
	row = '';
	for k in range(n+1):
		row += str(ZBash(n, k, 2)) + '\t';
	print(row);

	
0	
0	1	
0	0	0	
0	0	2	0	
0	0	2	0	0	
0	0	2	2	2	0	
0	0	2	4	6	4	4	
0	0	2	6	14	22	30	20	
0	0	2	8	26	64	130	184	136	
0	0	2	10	42	142	402	882	1322	1000	
>>> 
=== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ==
>>> for n in range(10):
	row = '';
	for k in range(n+1):
		Ucalc = 2*(k-1)/(n-1)*PBash(n-1,k-1,2,True,True)+2*UBash(n-1,k-1,2)+UBash(n-2,k-2,2)+2*ZBash(n-1,k-1,2)+2*ZBash(n-2,k-2,2);
		row += str(Ucalc) + '\t';
	print(row);

	
0.0	
Traceback (most recent call last):
  File "<pyshell#312>", line 4, in <module>
    Ucalc = 2*(k-1)/(n-1)*PBash(n-1,k-1,2,True,True)+2*UBash(n-1,k-1,2)+UBash(n-2,k-2,2)+2*ZBash(n-1,k-1,2)+2*ZBash(n-2,k-2,2);
ZeroDivisionError: division by zero
>>> for n in range(1,10):
	row = '';
	for k in range(n+1):
		Ucalc = 2*(k-1)/(n-1)*PBash(n-1,k-1,2,True,True)+2*UBash(n-1,k-1,2)+UBash(n-2,k-2,2)+2*ZBash(n-1,k-1,2)+2*ZBash(n-2,k-2,2);
		row += str(Ucalc) + '\t';
	print(row);

	
Traceback (most recent call last):
  File "<pyshell#314>", line 4, in <module>
    Ucalc = 2*(k-1)/(n-1)*PBash(n-1,k-1,2,True,True)+2*UBash(n-1,k-1,2)+UBash(n-2,k-2,2)+2*ZBash(n-1,k-1,2)+2*ZBash(n-2,k-2,2);
ZeroDivisionError: division by zero
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Ucalc = 2*(k-1)/(n-1)*PBash(n-1,k-1,2,True,True)+2*UBash(n-1,k-1,2)+UBash(n-2,k-2,2)+2*ZBash(n-1,k-1,2)+2*ZBash(n-2,k-2,2);
		row += str(Ucalc) + '\t';
	print(row);

	
0.0	0.0	4.0	
0.0	0.0	2.0	2.0	
0.0	0.0	2.0	8.0	0.0	
0.0	0.0	2.0	12.0	6.0	0.0	
0.0	0.0	2.0	16.0	18.0	16.0	20.0	
0.0	0.0	2.0	20.0	42.0	88.0	150.0	120.0	
0.0	0.0	2.0	24.0	78.0	256.0	650.0	1104.0	952.0	
0.0	0.0	2.0	28.0	126.0	568.0	2010.0	5292.0	9254.0	8000.0	
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Ucalc = (int)2*(k-1)/(n-1)*PBash(n-1,k-1,2,True,True)+2*UBash(n-1,k-1,2)+UBash(n-2,k-2,2)+2*ZBash(n-1,k-1,2)+2*ZBash(n-2,k-2,2);
		row += str(Ucalc) + '\t';
	print(row);
	
SyntaxError: invalid syntax
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Ucalc = int(2*(k-1)/(n-1)*PBash(n-1,k-1,2,True,True))+2*UBash(n-1,k-1,2)+UBash(n-2,k-2,2)+2*ZBash(n-1,k-1,2)+2*ZBash(n-2,k-2,2);
		row += str(Ucalc) + '\t';
	print(row);

	
0	0	4	
0	0	2	2	
0	0	2	8	0	
0	0	2	12	6	0	
0	0	2	16	18	16	20	
0	0	2	20	42	88	150	120	
0	0	2	24	78	256	650	1104	952	
0	0	2	28	126	568	2010	5292	9254	8000	
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Ubash = UBash(n,k,2);
		row += str(Ubash) + '\t';
	print(row);

	
0	0	0	
0	0	2	0	
0	0	2	0	0	
0	0	2	4	6	0	
0	0	2	8	18	16	20	
0	0	2	12	42	88	150	120	
0	0	2	16	78	256	650	1104	952	
0	0	2	20	126	568	2010	5292	9254	8000	
>>> PBash(6,4,2,False, True)
48
>>> UBash(6,4,3)
46
>>> 
================= RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ================
>>> UList(6,4,3)
[4, 5, 1, 6]
[5, 4, 6, 1]
[5, 1, 6, 4]
[4, 6, 1, 5]
[1, 6, 4, 5]
[6, 1, 5, 4]
[3, 5, 1, 6]
[5, 3, 1, 6]
[5, 3, 6, 1]
[5, 1, 6, 3]
[3, 6, 1, 5]
[1, 6, 3, 5]
[6, 1, 3, 5]
[6, 1, 5, 3]
[3, 4, 1, 6]
[3, 4, 6, 1]
[4, 3, 1, 6]
[4, 3, 6, 1]
[4, 1, 6, 3]
[4, 6, 1, 3]
[3, 1, 6, 4]
[3, 6, 1, 4]
[1, 6, 3, 4]
[6, 1, 3, 4]
[1, 6, 4, 3]
[6, 1, 4, 3]
[2, 5, 1, 6]
[5, 2, 6, 1]
[5, 1, 6, 2]
[2, 6, 1, 5]
[1, 6, 2, 5]
[6, 1, 5, 2]
[2, 4, 1, 6]
[2, 4, 6, 1]
[4, 2, 6, 1]
[4, 1, 6, 2]
[2, 6, 1, 4]
[1, 6, 2, 4]
[1, 6, 4, 2]
[6, 1, 4, 2]
[2, 3, 1, 6]
[3, 2, 6, 1]
[3, 1, 6, 2]
[2, 6, 1, 3]
[1, 6, 2, 3]
[6, 1, 3, 2]
>>> UBash(5,3,3)
8
>>> UBash(4,2,3)
2
>>> UBash(3,1,3)
0
>>> UBash(2,0,3)
0
>>> 
================= RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ================
>>> MBash(6,4,3)
12
>>> 
= RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py
>>> Z0Bash(4,2,3)
2
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Ucalc = int(2*(k-1)/(n-1)*PBash(n-1,k-1,3,True,True))-2*UBash(n-1,k-1,3)+3*UBash(n-2,k-2,3)+2*UBash(n-3,k-3,3)+1*UBash(n-4,k-4,3)+4*Z0Bash(n-2,k-2,3);
		row += str(Ucalc) + '\t';
	print(row);

	
0	0	2	
Traceback (most recent call last):
  File "<pyshell#332>", line 4, in <module>
    Ucalc = int(2*(k-1)/(n-1)*PBash(n-1,k-1,3,True,True))-2*UBash(n-1,k-1,3)+3*UBash(n-2,k-2,3)+2*UBash(n-3,k-3,3)+1*UBash(n-4,k-4,3)+4*Z0Bash(n-2,k-2,3);
  File "/Users/admin/Documents/Restricted nPk/Restricted Permutations.py", line 341, in Z0Bash
    if consecutivity(n, p, False, False)<j and zeroToZero(n,p):
  File "/Users/admin/Documents/Restricted nPk/Restricted Permutations.py", line 134, in zeroToZero
    if abs(permutation[0]-permutation[-1]) == n-1 and abs(permutation[0]-permutation[1])!=1 and abs(permutation[-1]-permutation[-2])!=1:
IndexError: list index out of range
>>> 
================================ RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ================================
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Ucalc = int(2*(k-1)/(n-1)*PBash(n-1,k-1,3,True,True))-2*UBash(n-1,k-1,3)+3*UBash(n-2,k-2,3)+2*UBash(n-3,k-3,3)+1*UBash(n-4,k-4,3)+4*Z0Bash(n-2,k-2,3);
		row += str(Ucalc) + '\t';
	print(row);

	
0	0	2	
0	0	2	0	
0	0	2	4	6	
0	0	2	8	6	24	
0	0	2	12	34	108	108	
0	0	2	16	74	296	672	764	
0	0	2	20	126	652	2296	5236	5828	
0	0	2	24	190	1224	5836	20160	45250	49788	
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Ubash = UBash(n, k, 3);
		row += str(Ubash) + '\t';
	print(row);

	
0	0	2	
0	0	2	0	
0	0	2	4	6	
0	0	2	8	18	20	
0	0	2	12	46	108	118	
0	0	2	16	86	308	708	788	
0	0	2	20	138	676	2380	5376	5960	
0	0	2	24	202	1260	5992	20576	46042	50528	
>>> MBash(5,3,3)
4
>>> MBash(6,4,3)
12
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Ucalc = int(2*(k-1)/(n-1)*PBash(n-1,k-1,3,True,True))-2*MBash(n,k,3)+2*UBash(n-1,k-1,3)+3*UBash(n-2,k-2,3)+2*UBash(n-3,k-3,3)+1*UBash(n-4,k-4,3)+4*Z0Bash(n-2,k-2,3);
		row += str(Ucalc) + '\t';
	print(row);

	
0	0	2	
0	0	2	8	
0	0	2	4	6	
0	0	2	8	14	24	
0	0	2	12	42	108	116	
0	0	2	16	82	304	696	780	
0	0	2	20	134	668	2352	5332	5916	
0	0	2	24	198	1248	5940	20440	45778	50284	
>>> 
================================ RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ================================
>>> 
================================ RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py ================================
>>> PList(5,3,3,True,True)
[2, 4, 5]
[4, 2, 5]
[4, 5, 2]
[2, 5, 4]
[5, 2, 4]
[5, 4, 2]
[2, 3, 5]
[3, 2, 5]
[3, 5, 2]
[2, 5, 3]
[5, 2, 3]
[5, 3, 2]
[1, 3, 5]
[3, 1, 5]
[3, 5, 1]
[1, 5, 3]
[5, 1, 3]
[5, 3, 1]
[1, 3, 4]
[3, 1, 4]
[3, 4, 1]
[1, 4, 3]
[4, 1, 3]
[4, 3, 1]
[1, 2, 4]
[2, 1, 4]
[2, 4, 1]
[1, 4, 2]
[4, 1, 2]
[4, 2, 1]
>>> UList(5,3,3)
[4, 1, 5]
[5, 1, 4]
[3, 1, 5]
[3, 5, 1]
[1, 5, 3]
[5, 1, 3]
[2, 5, 1]
[1, 5, 2]
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Mbash = MBash(n, k, 3);
		row+=str(Mbash)+'\t';
	print(row);

	
0	0	0	
0	0	0	0	
0	0	0	4	0	
0	0	0	4	4	12	
0	0	0	4	12	36	36	
0	0	0	4	20	88	204	228	
0	0	0	4	28	164	588	1368	1532	
0	0	0	4	36	264	1300	4620	10488	11672	
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Mcalc = 2*UBash(n-1,k-1,3)-2*Z0Bash(n-2,k-2,3);
		row+=str(Mcalc)+'\t';
	print(row);

	
0	0	0	
0	0	0	4	
0	0	0	4	0	
0	0	0	4	4	12	
0	0	0	4	12	36	36	
0	0	0	4	20	88	204	228	
0	0	0	4	28	164	588	1368	1532	
0	0	0	4	36	264	1300	4620	10488	11672	
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Ucalc = int(2*(k-1)/(n-1)*PBash(n-1,k-1,3,True,True))-2*MBash(n,k,3)+2*ZBash(n-2,k-2,3)+2*UBash(n-1,k-1,3)+3*UBash(n-2,k-2,3)+2*UBash(n-3,k-3,3)+1*UBash(n-4,k-4,3)+4*Z0Bash(n-2,k-2,3);
		row+=str(Ucalc)+'\t';
	print(row);

	
0	0	2	
0	0	2	10	
0	0	2	4	10	
0	0	2	8	18	24	
0	0	2	12	46	116	120	
0	0	2	16	86	316	712	796	
0	0	2	20	138	684	2392	5404	5980	
0	0	2	24	202	1268	6012	20640	46150	50628	
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Ubash = UBash(n,k,3);
		row+=str(Ubash)+'\t';
	print(row);

	
0	0	2	
0	0	2	0	
0	0	2	4	6	
0	0	2	8	18	20	
0	0	2	12	46	108	118	
0	0	2	16	86	308	708	788	
0	0	2	20	138	676	2380	5376	5960	
0	0	2	24	202	1260	5992	20576	46042	50528	
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Pbash = PBash(n,k,3,False,True);
		row+=str(Pbash)+'\t';
	print(row)

	
1	2	2	
1	3	6	0	
1	4	12	12	16	
1	5	20	42	88	80	
1	6	30	96	288	540	516	
1	7	42	180	712	2040	3936	3794	
1	8	56	300	1480	5720	16668	32368	31456	
1	9	72	462	2736	13320	52032	152418	297792	290970	
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Pcalc = PBash(n,k,3,True,True)+UBash(n-2,k-2,3)+2*UBash(n-1,k-1,3)+2*ZBash(n-1,k-1,3);
		row+=str(Pcalc)+'\t';
	print(row)

	
1	2	4	
1	3	6	8	
1	4	12	8	18	
1	5	20	38	98	76	
1	6	30	92	294	536	518	
1	7	42	176	714	2030	3918	3778	
1	8	56	296	1478	5696	16606	32248	31334	
1	9	72	458	2730	13274	51866	151928	296844	290046	
>>> 
================== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py =================
>>> ZXYBash(4,2,3,0,1)
0
>>> 
================== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py =================
>>> ZXYBash(4,2,3,0,1)
2
>>> MBash(6,4,3)
12
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Ucalc = int(2*(k-1)/(n-1)*PBash(n-1,k-1,3,True,True))-2*MBash(n,k,3)+2*ZXYBash(n-2,k-2,3,0,1)+2*UBash(n-1,k-1,3)+3*UBash(n-2,k-2,3)+2*UBash(n-3,k-3,3)+1*UBash(n-4,k-4,3)+4*Z0Bash(n-2,k-2,3);
		row+=str(Ucalc)+'\t';
	print(row);

	
0	0	2	
0	0	2	8	
0	0	2	4	6	
0	0	2	8	18	24	
0	0	2	12	46	112	120	
0	0	2	16	86	312	708	792	
0	0	2	20	138	680	2384	5392	5968	
0	0	2	24	202	1264	6000	20608	46090	50576	
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Ubash = UBash(n,k,3);
		row+=str(Ubash)+'\t';
	print(row);

	
0	0	2	
0	0	2	0	
0	0	2	4	6	
0	0	2	8	18	20	
0	0	2	12	46	108	118	
0	0	2	16	86	308	708	788	
0	0	2	20	138	676	2380	5376	5960	
0	0	2	24	202	1260	5992	20576	46042	50528	
>>> ZXYBash(6,4,3,0,0)
14
>>> ZXYBash(6,4,3,0,1)
16
>>> ZXYBash(6,4,3,1,1)
20
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		Ucalc = int(2*(k-1)/(n-1)*PBash(n-1,k-1,3,True,True))-2*MBash(n,k,3)+2*Z0Bash(n-2,k-2,3)+2*UBash(n-1,k-1,3)+3*UBash(n-2,k-2,3)+2*UBash(n-3,k-3,3)+1*UBash(n-4,k-4,3)+4*Z0Bash(n-2,k-2,3);
		row+=str(Ucalc)+'\t';
	print(row);

	
0	0	2	
0	0	2	8	
0	0	2	4	6	
0	0	2	8	18	24	
0	0	2	12	46	108	120	
0	0	2	16	86	308	708	788	
0	0	2	20	138	676	2380	5380	5960	
0	0	2	24	202	1260	5992	20580	46042	50532	
>>> UList(5,5,3)
[3, 2, 4, 1, 5]
[3, 4, 2, 5, 1]
[2, 4, 3, 1, 5]
[2, 4, 3, 5, 1]
[4, 2, 3, 1, 5]
[4, 2, 3, 5, 1]
[4, 3, 1, 5, 2]
[2, 4, 1, 5, 3]
[4, 2, 5, 1, 3]
[4, 1, 5, 3, 2]
[2, 3, 5, 1, 4]
[3, 1, 5, 2, 4]
[3, 5, 1, 4, 2]
[2, 5, 1, 3, 4]
[1, 5, 3, 2, 4]
[5, 1, 3, 2, 4]
[1, 5, 3, 4, 2]
[5, 1, 3, 4, 2]
[1, 5, 2, 4, 3]
[5, 1, 4, 2, 3]
>>> PBash(4,4,3,True,True)
16
>>> MBash(5,5,3)
12
>>> Z0Bash(3,3,3)
0
>>> UBash(4,4,3)
6
>>> UBash(3,3,3)
0
>>> UBash(2,2,3)
2
>>> UBash(1,1,3)
0
>>> Z0Bash(3,3,3)
0
>>> for n in range(2,12):
	row = '';
	for k in range(n+1):
		Ubash = UBash(n,k,3);
		row+=str(Ubash)+'\t';
	print(row);

	
0	0	2	
0	0	2	0	
0	0	2	4	6	
0	0	2	8	18	20	
0	0	2	12	46	108	118	
0	0	2	16	86	308	708	788	
0	0	2	20	138	676	2380	5376	5960	
0	0	2	24	202	1260	5992	20576	46042	50528	
0	0	2	28	278	2108	12648	58456	197702	437372	477002	
0	0	2	32	366	3268	23692	137808	625138	2086500	4575594	4959324	
>>> for n in range(2,12):
	row = '';
	for k in range(n+1):
		Ucalc = int(2*(k-1)/(n-1)*PBash(n-1,k-1,3,True,True))-2*MBash(n,k,3)+2*Z0Bash(n-2,k-2,3)+2*UBash(n-1,k-1,3)+3*UBash(n-2,k-2,3)+2*UBash(n-3,k-3,3)+1*UBash(n-4,k-4,3)+4*Z0Bash(n-2,k-2,3);
		row+=str(Ucalc)+'\t';
	print(row);

	
0	0	2	
0	0	2	8	
0	0	2	4	6	
0	0	2	8	18	24	
0	0	2	12	46	108	120	
0	0	2	16	86	308	708	788	
0	0	2	20	138	676	2380	5380	5960	
0	0	2	24	202	1260	5992	20580	46042	50532	
0	0	2	28	278	2108	12648	58460	197706	437384	477010	
0	0	2	32	366	3268	23692	137812	625146	2086528	4575642	4959368	
>>> 
================== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py =================
>>> UXBash(6,4,3)
38
>>> 
================== RESTART: /Users/admin/Documents/Restricted nPk/Restricted Permutations.py =================
>>> UXBash(6,4,3)
24
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		UXcalc = int(2*(k-1)/(n-1)*PBash(n-1,k-1,3,True,True))-2*MBash(n,k,3)+6*Z0Bash(n-2,k-2,3)
		row+=str(UXcalc)+'\t';
	print(row)

	
0	0	2	
0	0	2	4	
0	0	2	0	0	
0	0	2	4	4	8	
0	0	2	8	24	56	60	
0	0	2	12	56	188	428	480	
0	0	2	16	100	464	1608	3600	3984	
0	0	2	20	156	932	4356	14796	32932	35992	
>>> for n in range(2,10):
	row = '';
	for k in range(n+1):
		UXbash = UXBash(n,k,3);
		row+=str(UXbash)+'\t';
	print(row)

	
0	0	2	
0	0	2	0	
0	0	2	0	0	
0	0	2	4	4	8	
0	0	2	8	24	56	60	
0	0	2	12	56	188	428	480	
0	0	2	16	100	464	1608	3600	3984	
0	0	2	20	156	932	4356	14796	32932	35992	
>>> for n in range(2,12):
	row = '';
	for k in range(n+1):
		Ucalc = int(2*(k-1)/(n-1)*PBash(n-1,k-1,3,True,True))-2*MBash(n,k,3)+6*Z0Bash(n-2,k-2,3)+2*UBash(n-1,k-1,3)+3*UBash(n-2,k-2,3)+2*UBash(n-3,k-3,3)+1*UBash(n-4,k-4,3)-2*Z0Bash(n-3,k-3,3)-2*Z0Bash(n-4,k-4,3)-2*Z0Bash(n-5,k-5,3)
		row+=str(Ucalc)+'\t';
	print(row);

	
0	0	2	
0	0	2	8	
0	0	2	4	6	
0	0	2	8	18	24	
0	0	2	12	46	104	120	
0	0	2	16	86	304	704	784	
0	0	2	20	138	672	2372	5364	5948	
0	0	2	24	202	1256	5980	20544	45982	50476	
0	0	2	28	278	2104	12632	58396	197534	437060	476710	
0	0	2	32	366	3264	23672	137712	624774	2085464	4573626	4957444	
>>> 
